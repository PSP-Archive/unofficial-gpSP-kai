Only in 30_new/: #sound.c#
Only in 30_new/: adhoc.c
Only in 30_new/: adhoc.h
diff -ru 30_orig/bios.c 30_new/bios.c
--- 30_orig/bios.c	2007-08-16 14:57:05.864000000 +0900
+++ 30_new/bios.c	2007-08-05 23:04:12.000000000 +0900
@@ -34,7 +34,6 @@
   sw $15, 36(%0)\n            \
   sw $24, 44(%0)\n            \
   sw $25, 48(%0)\n            \
-  \n                          \
   sw $18, 40(%0)\n            \
   sw $28, 52(%0)\n            \
   sw $30, 64(%0)\n            \
@@ -54,7 +53,6 @@
   lw $15, 36(%0)\n            \
   lw $24, 44(%0)\n            \
   lw $25, 48(%0)\n            \
-  \n                          \
   lw $18, 40(%0)\n            \
   lw $28, 52(%0)\n            \
   lw $30, 64(%0)\n            \
diff -ru 30_orig/bios.h 30_new/bios.h
--- 30_orig/bios.h	2007-08-16 14:57:05.595000000 +0900
+++ 30_new/bios.h	2007-08-05 23:04:12.000000000 +0900
@@ -21,7 +21,7 @@
 #ifndef BIOS_H
 #define BIOS_H
 
-// ä÷êîêÈåæ
+// Èñ¢Êï∞ÂÆ£Ë®Ä
 void bios_halt();
 u32 bios_sqrt(u32 value);
 void bios_cpuset(u32 source, u32 dest, u32 cnt);
diff -ru 30_orig/cheats.c 30_new/cheats.c
--- 30_orig/cheats.c	2007-08-16 14:57:05.658000000 +0900
+++ 30_new/cheats.c	2007-08-05 23:04:12.000000000 +0900
@@ -77,8 +77,8 @@
 
   num_cheats = 0;
 
-  if (default_cheat_dir != NULL) {
-    sprintf(cheat_path, "%s/%s", default_cheat_dir, cheats_filename);
+  if (DEFAULT_CHEAT_DIR != NULL) {
+    sprintf(cheat_path, "%s/%s", DEFAULT_CHEAT_DIR, cheats_filename);
   }
   else
   {
diff -ru 30_orig/cheats.h 30_new/cheats.h
--- 30_orig/cheats.h	2007-08-16 14:57:05.695000000 +0900
+++ 30_new/cheats.h	2007-08-05 23:04:12.000000000 +0900
@@ -43,12 +43,12 @@
   CHEAT_VARIANT_ENUM cheat_variant;
 } CHEAT_TYPE;
 
-// ÉOÉçÅ[ÉoÉãïœêîêÈåæ
+// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ÂÆ£Ë®Ä
 
 extern CHEAT_TYPE game_config_cheats[MAX_CHEATS];
 extern u32 num_cheats;
 
-// ä÷êîêÈåæ
+// Èñ¢Êï∞ÂÆ£Ë®Ä
 
 void process_cheats();
 void add_cheats(char *cheats_filename);
diff -ru 30_orig/common.h 30_new/common.h
--- 30_orig/common.h	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/common.h	2007-08-05 23:04:12.000000000 +0900
@@ -41,6 +41,14 @@
 #include <psprtc.h>
 #include <psppower.h>
 #include <psputility_sysparam.h>
+#include <pspsdk.h>
+#include <psputilsforkernel.h>
+#include <pspnet.h>
+#include <psputility_netmodules.h>
+#include <pspnet_adhoc.h>
+#include <pspnet_adhocctl.h>
+#include <pspnet_adhocmatching.h>
+#include <pspwlan.h>
 
 typedef s32 FILE_TAG_TYPE;
 typedef u32 FIXED16_16;
@@ -144,7 +152,9 @@
 #define USE_BIOS 0
 #define EMU_BIOS 1
 
+// „Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆË®≠ÂÆö
 #define DBG_FILE_NAME "dbg_msg.txt"
+#define DBGOUT(...) fprintf(dbg_file, __VA_ARGS__)
 FILE *dbg_file;
 
 #include "SDL.h"
@@ -160,5 +170,6 @@
 #include "fbm_print.h"
 #include "message.h"
 #include "bios.h"
+#include "adhoc.h"
 
-#endif
+#endif /* COMMON_H */
diff -ru 30_orig/cpu.c 30_new/cpu.c
--- 30_orig/cpu.c	2007-08-16 14:57:05.815000000 +0900
+++ 30_new/cpu.c	2007-08-06 23:46:02.000000000 +0900
@@ -459,7 +459,7 @@
   n_flag = reg[REG_CPSR] >> 31;                                               \
   z_flag = (reg[REG_CPSR] >> 30) & 0x01;                                      \
   c_flag = (reg[REG_CPSR] >> 29) & 0x01;                                      \
-  v_flag = (reg[REG_CPSR] >> 28) & 0x01;                                      \
+  v_flag = (reg[REG_CPSR] >> 28) & 0x01                                       \
 
 #define collapse_flags()                                                      \
   reg[REG_CPSR] = (n_flag << 31) | (z_flag << 30) | (c_flag << 29) |          \
@@ -638,7 +638,7 @@
 
 #define arm_multiply_flags_yes(_dest)                                         \
   calculate_z_flag(_dest);                                                    \
-  calculate_n_flag(_dest);                                                    \
+  calculate_n_flag(_dest)                                                     \
 
 #define arm_multiply_flags_no(_dest)                                          \
 
@@ -659,7 +659,7 @@
 }                                                                             \
 
 #define arm_multiply_long_addop(type)                                         \
-  + ((type##64)((((type##64)reg[rdhi]) << 32) | reg[rdlo]));                  \
+  + ((type##64)((((type##64)reg[rdhi]) << 32) | reg[rdlo]))                   \
 
 #define arm_multiply_long(add_op, flags, type)                                \
 {                                                                             \
@@ -1332,7 +1332,7 @@
   address += offset + 4                                                       \
 
 #define thumb_block_address_postadjust_push_lr()                              \
-  store_memory_u32(address + offset, reg[REG_LR]);                            \
+  store_memory_u32(address + offset, reg[REG_LR])                             \
 
 #define thumb_block_memory_wb_load(base_reg)                                  \
   if(!((reg_list >> base_reg) & 0x01))                                        \
@@ -1393,10 +1393,10 @@
   MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,
   MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,
   MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_INVALID,
-  MODE_INVALID, MODE_USER, MODE_FIQ, MODE_IRQ, MODE_SUPERVISOR, MODE_INVALID,
-  MODE_INVALID, MODE_INVALID, MODE_ABORT, MODE_INVALID, MODE_INVALID,
-  MODE_INVALID, MODE_INVALID, MODE_UNDEFINED, MODE_INVALID, MODE_INVALID,
-  MODE_USER
+  MODE_INVALID, MODE_USER,    MODE_FIQ,     MODE_IRQ,     MODE_SUPERVISOR,
+  MODE_INVALID, MODE_INVALID, MODE_INVALID, MODE_ABORT,   MODE_INVALID,
+  MODE_INVALID, MODE_INVALID, MODE_UNDEFINED,MODE_INVALID,MODE_INVALID,
+  MODE_INVALID, MODE_USER
 };
 
 u32 cpu_modes_cpsr[7] = { 0x10, 0x11, 0x12, 0x13, 0x17, 0x1B, 0x1F };
@@ -1888,7 +1888,7 @@
       else                                                                    \
       {                                                                       \
         /* RSC rd, rn, reg_op */                                              \
-        arm_data_proc(reg_sh - reg[rn] + c_flag - 1, reg);                    \
+        arm_data_proc(reg_sh - (reg[rn] + (c_flag ^ 1)), reg);                \
       }                                                                       \
       break;                                                                  \
                                                                               \
@@ -1921,7 +1921,7 @@
       else                                                                    \
       {                                                                       \
         /* RSCS rd, rn, reg_op */                                             \
-        arm_data_proc_sub_flags((reg_sh + c_flag - 1), reg[rn], reg);         \
+        arm_data_proc_sub_flags(reg_sh, reg[rn] + (c_flag ^ 1), reg);         \
       }                                                                       \
       break;                                                                  \
                                                                               \
@@ -2351,7 +2351,7 @@
                                                                               \
     case 0x2C:                                                                \
       /* SBC rd, rn, imm */                                                   \
-      arm_data_proc(reg[rn] - imm + c_flag - 1, imm);                         \
+      arm_data_proc(reg[rn] - (imm + (c_flag ^ 1)), imm);                     \
       break;                                                                  \
                                                                               \
     case 0x2D:                                                                \
@@ -2361,12 +2361,12 @@
                                                                               \
     case 0x2E:                                                                \
       /* RSC rd, rn, imm */                                                   \
-      arm_data_proc(imm - reg[rn] + c_flag - 1, imm);                         \
+      arm_data_proc(imm - (reg[rn] + (c_flag ^ 1)), imm);                     \
       break;                                                                  \
                                                                               \
     case 0x2F:                                                                \
       /* RSCS rd, rn, imm */                                                  \
-      arm_data_proc_sub_flags((imm + c_flag - 1), reg[rn], imm);              \
+      arm_data_proc_sub_flags(imm, reg[rn] + (c_flag ^ 1), imm);              \
       break;                                                                  \
                                                                               \
     case 0x30 ... 0x31:                                                       \
@@ -2919,22 +2919,7 @@
       arm_block_memory(load, up, up, yes);                                    \
       break;                                                                  \
                                                                               \
-    case 0xA0:                                                                \
-    case 0xA1:                                                                \
-    case 0xA2:                                                                \
-    case 0xA3:                                                                \
-    case 0xA4:                                                                \
-    case 0xA5:                                                                \
-    case 0xA6:                                                                \
-    case 0xA7:                                                                \
-    case 0xA8:                                                                \
-    case 0xA9:                                                                \
-    case 0xAA:                                                                \
-    case 0xAB:                                                                \
-    case 0xAC:                                                                \
-    case 0xAD:                                                                \
-    case 0xAE:                                                                \
-    case 0xAF:                                                                \
+    case 0xA0 ... 0xAF:                                                       \
     {                                                                         \
       /* B offset */                                                          \
       arm_decode_branch();                                                    \
@@ -2963,13 +2948,13 @@
       switch(swi_comment >> 16)                                               \
       {                                                                       \
         /* Jump to BIOS SWI handler */                                        \
-        case 0x00 ... 0x2b:                                                   \
+        case 0x00 ... 0x2A:                                                   \
           reg_mode[MODE_SUPERVISOR][6] = pc + 4;                              \
           collapse_flags();                                                   \
           spsr[MODE_SUPERVISOR] = reg[REG_CPSR];                              \
           reg[REG_PC] = 0x00000008;                                           \
           arm_update_pc();                                                    \
-          reg[REG_CPSR] = (reg[REG_CPSR] & ~0x3F) | 0x13;                     \
+          reg[REG_CPSR] = (reg[REG_CPSR] & ~0x1F) | 0x13;                     \
           set_cpu_mode(MODE_SUPERVISOR);                                      \
           break;                                                              \
       }                                                                       \
@@ -3596,7 +3581,7 @@
       thumb_add_noflags(imm, 7, reg[REG_SP], (imm * 4));                      \
       break;                                                                  \
                                                                               \
-    case 0xB0 ... 0xB3:                                                       \
+    case 0xB0:                                                                \
       if((opcode >> 7) & 0x01)                                                \
       {                                                                       \
         /* ADD sp, -imm */                                                    \
diff -ru 30_orig/fbm_print.c 30_new/fbm_print.c
--- 30_orig/fbm_print.c	2007-08-16 14:57:05.706000000 +0900
+++ 30_new/fbm_print.c	2007-08-06 23:47:04.000000000 +0900
@@ -301,7 +301,7 @@
 
 
 	sceDisplayGetMode(&unk, &pwidth, &pheight);
-	sceDisplayGetFrameBuf(&vram, &bufferwidth, &pixelformat, unk);
+	sceDisplayGetFrameBuf(&vram, &bufferwidth, &pixelformat, &unk);
 
 	return fbm_printVRAM(vram, bufferwidth, pixelformat, x, y, str, color, back, fill, rate, 0);
 }
Only in 30_new/: game_config.txt
diff -ru 30_orig/gui.c 30_new/gui.c
--- 30_orig/gui.c	2007-08-16 14:57:05.723000000 +0900
+++ 30_new/gui.c	2007-08-06 23:47:38.000000000 +0900
@@ -1,4 +1,4 @@
- /* unofficial gameplaySP kai
+/* unofficial gameplaySP kai
  *
  * Copyright (C) 2006 Exophase <exophase@gmail.com>
  * Copyright (C) 2007 takka <takka@tfact.net>
@@ -18,45 +18,256 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
+/******************************************************************************
+ * gui.c
+ * guiÂë®„Çä„ÅÆÂá¶ÁêÜ
+ ******************************************************************************/
+
+/******************************************************************************
+ * „Éò„ÉÉ„ÉÄ„Éï„Ç°„Ç§„É´„ÅÆË™≠Ëæº„Åø
+ ******************************************************************************/
 #include "common.h"
 
-// Blatantly stolen and trimmed from MZX (megazeux.sourceforge.net)
-
+/******************************************************************************
+ * „Éû„ÇØ„É≠Á≠â„ÅÆÂÆöÁæ©
+ ******************************************************************************/
 #define STATUS_ROWS 0
 #define CURRENT_DIR_ROWS 1
 #define FILE_LIST_ROWS 25
 #define FILE_LIST_POSITION 5
 #define DIR_LIST_POSITION 360
 #define PAGE_SCROLL_NUM 5
+#define GPSP_CONFIG_FILENAME "gpsp.cfg"
 
-#define color16(red, green, blue)                                             \
+#define COLOR16(red, green, blue)                                             \
   (blue << 11) | (green << 5) | red                                           \
 
-#define COLOR_BG            color16(2, 8, 10)
-#define COLOR_ROM_INFO      color16(22, 36, 26)
-#define COLOR_ACTIVE_ITEM   color16(31, 63, 31)
-#define COLOR_INACTIVE_ITEM color16(13, 40, 18)
-#define COLOR_FRAMESKIP_BAR color16(15, 31, 31)
-#define COLOR_HELP_TEXT     color16(16, 40, 24)
-
-char font8[MAX_PATH];
-char font16[MAX_PATH];
-char default_rom_dir[MAX_PATH];
-char default_save_dir[MAX_PATH];
-char default_cfg_dir[MAX_PATH];
-char default_ss_dir[MAX_PATH];
-char default_cheat_dir[MAX_PATH];
+#define COLOR_BG            COLOR16(2, 8, 10)
+#define COLOR_ROM_INFO      COLOR16(22, 36, 26)
+#define COLOR_ACTIVE_ITEM   COLOR16(31, 63, 31)
+#define COLOR_INACTIVE_ITEM COLOR16(13, 40, 18)
+#define COLOR_FRAMESKIP_BAR COLOR16(15, 31, 31)
+#define COLOR_HELP_TEXT     COLOR16(16, 40, 24)
 
-u32 menu_cheat_page = 0;
+#define MAKE_MENU(name, init_function, passive_function)                      \
+  MENU_TYPE name##_menu =                                                     \
+  {                                                                           \
+    init_function,                                                            \
+    passive_function,                                                         \
+    name##_options,                                                           \
+    sizeof(name##_options) / sizeof(MENU_OPTION_TYPE)                         \
+  }                                                                           \
 
-int sort_function(const void *dest_str_ptr, const void *src_str_ptr);
-void _flush_cache();
+#define GAMEPAD_CONFIG_OPTION(display_string, number)                         \
+{                                                                             \
+  NULL,                                                                       \
+  menu_fix_gamepad_help,                                                      \
+  NULL,                                                                       \
+  display_string,                                                             \
+  gamepad_config_buttons,                                                     \
+  gamepad_config_map + gamepad_config_line_to_button[number],                 \
+  sizeof(gamepad_config_buttons) / sizeof(gamepad_config_buttons[0]),         \
+  gamepad_help[gamepad_config_map[                                            \
+   gamepad_config_line_to_button[number]]],                                   \
+  number,                                                                     \
+  STRING_SELECTION_TYPE                                                     \
+}                                                                             \
+
+#define ANALOG_CONFIG_OPTION(display_string, number)                          \
+{                                                                             \
+  NULL,                                                                       \
+  menu_fix_gamepad_help,                                                      \
+  NULL,                                                                       \
+  display_string,                                                             \
+  gamepad_config_buttons,                                                     \
+  gamepad_config_map + number + 12,                                           \
+  sizeof(gamepad_config_buttons) / sizeof(gamepad_config_buttons[0]),         \
+  gamepad_help[gamepad_config_map[number + 12]],                              \
+  number + 2,                                                                 \
+  STRING_SELECTION_TYPE                                                     \
+}                                                                             \
+
+#define CHEAT_OPTION(number)                                                  \
+{                                                                             \
+  NULL,                                                                       \
+  NULL,                                                                       \
+  NULL,                                                                       \
+  cheat_format_str[number],                                                   \
+  enable_disable_options,                                                     \
+  &(game_config_cheats[number].cheat_active),                                 \
+  2,                                                                          \
+  msg[MSG_CHEAT_MENU_HELP_0],                                                 \
+  (number) % 10,                                                              \
+  STRING_SELECTION_TYPE                                                     \
+}                                                                             \
+
+#define ACTION_OPTION(action_function, passive_function, display_string,      \
+ help_string, line_number)                                                    \
+{                                                                             \
+  action_function,                                                            \
+  passive_function,                                                           \
+  NULL,                                                                       \
+  display_string,                                                             \
+  NULL,                                                                       \
+  NULL,                                                                       \
+  0,                                                                          \
+  help_string,                                                                \
+  line_number,                                                                \
+  ACTION_TYPE                                                               \
+}                                                                             \
+
+#define SUBMENU_OPTION(sub_menu, display_string, help_string, line_number)    \
+{                                                                             \
+  NULL,                                                                       \
+  NULL,                                                                       \
+  sub_menu,                                                                   \
+  display_string,                                                             \
+  NULL,                                                                       \
+  NULL,                                                                       \
+  sizeof(sub_menu) / sizeof(MENU_OPTION_TYPE),                                \
+  help_string,                                                                \
+  line_number,                                                                \
+  SUBMENU_TYPE                                                              \
+}                                                                             \
+
+#define SELECTION_OPTION(passive_function, display_string, options,           \
+ option_ptr, num_options, help_string, line_number, type)                     \
+{                                                                             \
+  NULL,                                                                       \
+  passive_function,                                                           \
+  NULL,                                                                       \
+  display_string,                                                             \
+  options,                                                                    \
+  option_ptr,                                                                 \
+  num_options,                                                                \
+  help_string,                                                                \
+  line_number,                                                                \
+  type                                                                        \
+}                                                                             \
+
+#define ACTION_SELECTION_OPTION(action_function, passive_function,            \
+ display_string, options, option_ptr, num_options, help_string, line_number,  \
+ type)                                                                        \
+{                                                                             \
+  action_function,                                                            \
+  passive_function,                                                           \
+  NULL,                                                                       \
+  display_string,                                                             \
+  options,                                                                    \
+  option_ptr,                                                                 \
+  num_options,                                                                \
+  help_string,                                                                \
+  line_number,                                                                \
+  type | ACTION_TYPE                                                        \
+}                                                                             \
+
+#define STRING_SELECTION_OPTION(passive_function, display_string, options,    \
+ option_ptr, num_options, help_string, line_number)                           \
+  SELECTION_OPTION(passive_function, display_string, options,                 \
+   option_ptr, num_options, help_string, line_number, STRING_SELECTION_TYPE)\
+
+#define NUMERIC_SELECTION_OPTION(passive_function, display_string,            \
+ option_ptr, num_options, help_string, line_number)                           \
+  SELECTION_OPTION(passive_function, display_string, NULL, option_ptr,        \
+   num_options, help_string, line_number, NUMBER_SELECTION_TYPE)            \
+
+#define STRING_SELECTION_ACTION_OPTION(action_function, passive_function,     \
+ display_string, options, option_ptr, num_options, help_string, line_number)  \
+  ACTION_SELECTION_OPTION(action_function, passive_function,                  \
+   display_string,  options, option_ptr, num_options, help_string,            \
+   line_number, STRING_SELECTION_TYPE)                                      \
+
+#define NUMERIC_SELECTION_ACTION_OPTION(action_function, passive_function,    \
+ display_string, option_ptr, num_options, help_string, line_number)           \
+  ACTION_SELECTION_OPTION(action_function, passive_function,                  \
+   display_string,  NULL, option_ptr, num_options, help_string,               \
+   line_number, NUMBER_SELECTION_TYPE)                                      \
+
+#define NUMERIC_SELECTION_HIDE_OPTION(action_function,                 \
+ passive_function, display_string, option_ptr, num_options, help_string,      \
+ line_number)                                                                 \
+  ACTION_SELECTION_OPTION(action_function, passive_function,                  \
+   display_string, NULL, option_ptr, num_options, help_string,                \
+   line_number, NUMBER_SELECTION_TYPE)                                      \
 
+#define GAMEPAD_MENU_WIDTH 15
 
+typedef enum
+{
+  NUMBER_SELECTION_TYPE = 0x01,
+  STRING_SELECTION_TYPE = 0x02,
+  SUBMENU_TYPE          = 0x04,
+  ACTION_TYPE           = 0x08
+} menu_option_type_enum;
+
+struct _MENU_TYPE
+{
+  void (* init_function)();
+  void (* passive_function)();
+  struct _MENU_OPTION_TYPE *options;
+  u32 num_options;
+};
 
+struct _MENU_OPTION_TYPE
+{
+  void (* action_function)();
+  void (* passive_function)();
+  struct _MENU_TYPE *sub_menu;
+  char *display_string;
+  void *options;
+  u32 *current_option;
+  u32 num_options;
+  char *help_string;
+  u32 line_number;
+  menu_option_type_enum option_type;
+};
+typedef struct _MENU_OPTION_TYPE MENU_OPTION_TYPE;
 
+typedef enum
+{
+  MAIN_MENU,
+  GAMEPAD_MENU,
+  SAVESTATE_MENU,
+  FRAMESKIP_MENU,
+  CHEAT_MENU,
+  ADHOC_MENU
+} MENU_ENUM;
+typedef struct _MENU_TYPE MENU_TYPE;
+
+/******************************************************************************
+ * „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„ÅÆÂÆöÁæ©
+ ******************************************************************************/
+char DEFAULT_ROM_DIR[MAX_PATH];
+char DEFAULT_SAVE_DIR[MAX_PATH];
+char DEFAULT_CFG_DIR[MAX_PATH];
+char DEFAULT_SS_DIR[MAX_PATH];
+char DEFAULT_CHEAT_DIR[MAX_PATH];
+u32 SAVESTATE_SLOT = 0;
+
+/******************************************************************************
+ * „É≠„Éº„Ç´„É´Â§âÊï∞„ÅÆÂÆöÁæ©
+ ******************************************************************************/
+static char font8[MAX_PATH];
+static char font16[MAX_PATH];
+static u32 menu_cheat_page = 0;
+static u32 gamepad_config_line_to_button[] = { 8, 6, 7, 9, 1, 2, 3, 0, 4, 5, 11, 10 };
+static u32 clock_speed_number;
+
+/******************************************************************************
+ * „É≠„Éº„Ç´„É´Èñ¢Êï∞„ÅÆÂÆ£Ë®Ä
+ ******************************************************************************/
+static s32 save_game_config_file();
+static s32 save_config_file();
+static void get_savestate_snapshot(char *savestate_filename);
+static void get_savestate_filename(u32 slot, char *name_buffer);
+static int sort_function(const void *dest_str_ptr, const void *src_str_ptr);
+static u32 parse_line(char *current_line, char *current_str);
+static void print_status();
+static void get_timestamp_string(char *buffer, u16 msg_id, u16 year, u16 mon, u16 day, u16 wday, u16 hour, u16 min, u16 sec, u32 msec);
+static void save_ss_bmp(u16 *image);
+void _flush_cache();
 
-int sort_function(const void *dest_str_ptr, const void *src_str_ptr)
+static int sort_function(const void *dest_str_ptr, const void *src_str_ptr)
 {
   char *dest_str = *((char **)dest_str_ptr);
   char *src_str = *((char **)src_str_ptr);
@@ -70,7 +281,12 @@
   return strcasecmp(dest_str, src_str);
 }
 
-// îƒópÉtÉ@ÉCÉãì«çûÇ›
+/******************************************************************************
+ * „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„ÅÆÂÆöÁæ©
+ ******************************************************************************/
+/*--------------------------------------------------------
+  Ê±éÁî®„Éï„Ç°„Ç§„É´Ë™≠Ëæº„Åø
+--------------------------------------------------------*/
 s32 load_file(char **wildcards, char *result,char *default_dir_name)
 {
   DIR *current_dir;
@@ -503,189 +719,9 @@
   return return_value;
 }
 
-typedef enum
-{
-  NUMBER_SELECTION_OPTION = 0x01,
-  STRING_SELECTION_OPTION = 0x02,
-  SUBMENU_OPTION          = 0x04,
-  ACTION_OPTION           = 0x08
-} menu_option_type_enum;
-
-struct _menu_type
-{
-  void (* init_function)();
-  void (* passive_function)();
-  struct _menu_option_type *options;
-  u32 num_options;
-};
-
-struct _menu_option_type
-{
-  void (* action_function)();
-  void (* passive_function)();
-  struct _menu_type *sub_menu;
-  char *display_string;
-  void *options;
-  u32 *current_option;
-  u32 num_options;
-  char *help_string;
-  u32 line_number;
-  menu_option_type_enum option_type;
-};
-
-typedef struct _menu_option_type menu_option_type;
-typedef struct _menu_type menu_type;
-
-#define make_menu(name, init_function, passive_function)                      \
-  menu_type name##_menu =                                                     \
-  {                                                                           \
-    init_function,                                                            \
-    passive_function,                                                         \
-    name##_options,                                                           \
-    sizeof(name##_options) / sizeof(menu_option_type)                         \
-  }                                                                           \
-
-#define gamepad_config_option(display_string, number)                         \
-{                                                                             \
-  NULL,                                                                       \
-  menu_fix_gamepad_help,                                                      \
-  NULL,                                                                       \
-  display_string,                                                             \
-  gamepad_config_buttons,                                                     \
-  gamepad_config_map + gamepad_config_line_to_button[number],             \
-  sizeof(gamepad_config_buttons) / sizeof(gamepad_config_buttons[0]),         \
-  gamepad_help[gamepad_config_map[                                            \
-   gamepad_config_line_to_button[number]]],                               \
-  number,                                                                     \
-  STRING_SELECTION_OPTION                                                     \
-}                                                                             \
-
-#define analog_config_option(display_string, number)                          \
-{                                                                             \
-  NULL,                                                                       \
-  menu_fix_gamepad_help,                                                      \
-  NULL,                                                                       \
-  display_string,                                                             \
-  gamepad_config_buttons,                                                     \
-  gamepad_config_map + number + 12,                                           \
-  sizeof(gamepad_config_buttons) / sizeof(gamepad_config_buttons[0]),         \
-  gamepad_help[gamepad_config_map[number + 12]],                              \
-  number + 2,                                                                 \
-  STRING_SELECTION_OPTION                                                     \
-}                                                                             \
-
-#define cheat_option(number)                                                  \
-{                                                                             \
-  NULL,                                                                       \
-  NULL,                                                                       \
-  NULL,                                                                       \
-  cheat_format_str[number],                                                   \
-  enable_disable_options,                                                     \
-  &(game_config_cheats[number].cheat_active),                                 \
-  2,                                                                          \
-  msg[MSG_CHEAT_MENU_HELP_0],                                                 \
-  (number) % 10,                                                              \
-  STRING_SELECTION_OPTION                                                     \
-}                                                                             \
-
-#define action_option(action_function, passive_function, display_string,      \
- help_string, line_number)                                                    \
-{                                                                             \
-  action_function,                                                            \
-  passive_function,                                                           \
-  NULL,                                                                       \
-  display_string,                                                             \
-  NULL,                                                                       \
-  NULL,                                                                       \
-  0,                                                                          \
-  help_string,                                                                \
-  line_number,                                                                \
-  ACTION_OPTION                                                               \
-}                                                                             \
-
-#define submenu_option(sub_menu, display_string, help_string, line_number)    \
-{                                                                             \
-  NULL,                                                                       \
-  NULL,                                                                       \
-  sub_menu,                                                                   \
-  display_string,                                                             \
-  NULL,                                                                       \
-  NULL,                                                                       \
-  sizeof(sub_menu) / sizeof(menu_option_type),                                \
-  help_string,                                                                \
-  line_number,                                                                \
-  SUBMENU_OPTION                                                              \
-}                                                                             \
-
-#define selection_option(passive_function, display_string, options,           \
- option_ptr, num_options, help_string, line_number, type)                     \
-{                                                                             \
-  NULL,                                                                       \
-  passive_function,                                                           \
-  NULL,                                                                       \
-  display_string,                                                             \
-  options,                                                                    \
-  option_ptr,                                                                 \
-  num_options,                                                                \
-  help_string,                                                                \
-  line_number,                                                                \
-  type                                                                        \
-}                                                                             \
-
-#define action_selection_option(action_function, passive_function,            \
- display_string, options, option_ptr, num_options, help_string, line_number,  \
- type)                                                                        \
-{                                                                             \
-  action_function,                                                            \
-  passive_function,                                                           \
-  NULL,                                                                       \
-  display_string,                                                             \
-  options,                                                                    \
-  option_ptr,                                                                 \
-  num_options,                                                                \
-  help_string,                                                                \
-  line_number,                                                                \
-  type | ACTION_OPTION                                                        \
-}                                                                             \
-
-
-#define string_selection_option(passive_function, display_string, options,    \
- option_ptr, num_options, help_string, line_number)                           \
-  selection_option(passive_function, display_string, options,                 \
-   option_ptr, num_options, help_string, line_number, STRING_SELECTION_OPTION)\
-
-#define numeric_selection_option(passive_function, display_string,            \
- option_ptr, num_options, help_string, line_number)                           \
-  selection_option(passive_function, display_string, NULL, option_ptr,        \
-   num_options, help_string, line_number, NUMBER_SELECTION_OPTION)            \
-
-#define string_selection_action_option(action_function, passive_function,     \
- display_string, options, option_ptr, num_options, help_string, line_number)  \
-  action_selection_option(action_function, passive_function,                  \
-   display_string,  options, option_ptr, num_options, help_string,            \
-   line_number, STRING_SELECTION_OPTION)                                      \
-
-#define numeric_selection_action_option(action_function, passive_function,    \
- display_string, option_ptr, num_options, help_string, line_number)           \
-  action_selection_option(action_function, passive_function,                  \
-   display_string,  NULL, option_ptr, num_options, help_string,               \
-   line_number, NUMBER_SELECTION_OPTION)                                      \
-
-#define numeric_selection_action_hide_option(action_function,                 \
- passive_function, display_string, option_ptr, num_options, help_string,      \
- line_number)                                                                 \
-  action_selection_option(action_function, passive_function,                  \
-   display_string, NULL, option_ptr, num_options, help_string,                \
-   line_number, NUMBER_SELECTION_OPTION)                                      \
-
-
-#define GAMEPAD_MENU_WIDTH 15
-
-u32 gamepad_config_line_to_button[] =
- { 8, 6, 7, 9, 1, 2, 3, 0, 4, 5, 11, 10 };
-
-
-// ÉQÅ[ÉÄÇ≤Ç∆ÇÃcfgÉtÉ@ÉCÉãÇÃì«çûÇ›
+/*--------------------------------------------------------
+  game cfg„Éï„Ç°„Ç§„É´„ÅÆË™≠Ëæº„Åø
+--------------------------------------------------------*/
 s32 load_game_config_file()
 {
   char game_config_filename[MAX_FILE];
@@ -695,8 +731,8 @@
 
   change_ext(gamepak_filename, game_config_filename, ".cfg");
 
-  if (default_cfg_dir != NULL) {
-    sprintf(game_config_path, "%s/%s", default_cfg_dir, game_config_filename);
+  if (DEFAULT_CFG_DIR != NULL) {
+    sprintf(game_config_path, "%s/%s", DEFAULT_CFG_DIR, game_config_filename);
   }
   else
   {
@@ -726,6 +762,10 @@
       if(game_config_clock_speed < 33)
         game_config_clock_speed = 33;
 
+      /* „É°„Éã„É•„ÉºÁµÇ‰∫ÜÊôÇ„ÅØ clock_speed_number „ÇíÂÖÉ„Å´„ÇØ„É≠„ÉÉ„ÇØ„ÅåÂ§âÊõ¥„Åï„Çå„Çã */
+      /* Ëµ∑ÂãïÊôÇ„ÅÆ„Éï„Ç°„Ç§„É´„É™„Çπ„Éà„Åã„Çâ„ÅÆÂ†¥Âêà„ÅØ„ÄÅgame_config_clock_speed */
+      clock_speed_number = (game_config_clock_speed / 33) - 1;
+
       if(game_config_frameskip_value < 0)
         game_config_frameskip_value = 0;
 
@@ -743,11 +783,13 @@
     }
   }
 
-  // ì«Ç›çûÇﬂÇ»Ç©Ç¡ÇΩèÍçáÇÃèâä˙ílÇÃê›íË
+  // Ë™≠„ÅøËæº„ÇÅ„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆÂàùÊúüÂÄ§„ÅÆË®≠ÂÆö
   game_config_frameskip_type = auto_frameskip;
-  game_config_frameskip_value = 4;
+  /* ‰∏ÄÁû¨Ë≤†Ëç∑„Åå‰∏ä„Åå„ÇãÂ†¥Âêà„ÄÅ„Çπ„Ç≠„ÉÉ„Éó„ÇíÂ¢ó„ÇÑ„Åó„ÅüÊñπ„Åå„Çπ„É†„Éº„Ç∫„Å´Âãï‰Ωú„Åô„Çã„ÄÇ */
+  game_config_frameskip_value = 9;
   game_config_random_skip = 0;
   game_config_clock_speed = 333;
+  clock_speed_number = 9;
 
   for(i = 0; i < MAX_CHEATS; i++)
   {
@@ -758,6 +800,9 @@
   return -1;
 }
 
+/*--------------------------------------------------------
+  gpSP cfg„Éï„Ç°„Ç§„É´„ÅÆË™≠Ëæº„Åø
+--------------------------------------------------------*/
 s32 load_config_file()
 {
   char config_path[512];
@@ -783,215 +828,48 @@
       screen_filter = file_options[1] % 2;
       global_enable_audio = file_options[2] % 2;
       audio_buffer_size_number = file_options[3] % 11;
-      update_backup_flag = file_options[4] % 2;
-      global_enable_analog = file_options[5] % 2;
-      analog_sensitivity_level = file_options[6] % 8;
-
-      scePowerSetClockFrequency(game_config_clock_speed, game_config_clock_speed, game_config_clock_speed / 2);
-
-      // Sanity check: Make sure there's a MENU or FRAMESKIP
-      // key, if not assign to triangle
-
-      for(i = 0; i < 16; i++)
-      {
-        gamepad_config_map[i] = file_options[7 + i] %
-         (BUTTON_ID_NONE + 1);
-
-        if(gamepad_config_map[i] == BUTTON_ID_MENU)
-        {
-          menu_button = i;
-        }
-      }
-
-      if(menu_button == -1)
-      {
-        gamepad_config_map[0] = BUTTON_ID_MENU;
-      }
-
-      FILE_CLOSE(config_file);
-    }
-
-    return 0;
-  }
-
-  return -1;
-}
-
-s32 save_game_config_file()
-{
-  char game_config_filename[MAX_FILE];
-  char game_config_path[MAX_PATH];
-  u32 i;
-  FILE_ID game_config_file;
-
-  if(gamepak_filename[0] == 0) return -1;
-
-  change_ext(gamepak_filename, game_config_filename, ".cfg");
-
-  if (default_cfg_dir != NULL) {
-    sprintf(game_config_path, "%s/%s", default_cfg_dir, game_config_filename);
-  }
-  else
-  {
-    strcpy(game_config_path, game_config_filename);
-  }
-
-  FILE_OPEN(game_config_file, game_config_path, WRITE);
-  if(FILE_CHECK_VALID(game_config_file))
-  {
-    u32 file_options[4 + MAX_CHEATS];
-
-    file_options[0] = game_config_frameskip_type;
-    file_options[1] = game_config_frameskip_value;
-    file_options[2] = game_config_random_skip;
-    file_options[3] = game_config_clock_speed;
-
-    for(i = 0; i < MAX_CHEATS; i++)
-    {
-      file_options[4 + i] = game_config_cheats[i].cheat_active;
-    }
-
-    FILE_WRITE_ARRAY(game_config_file, file_options);
-    FILE_CLOSE(game_config_file);
-
-    return 0;
-  }
-
-  return -1;
-}
-
-s32 save_config_file()
-{
-  char config_path[512];
-  FILE_ID config_file;
-
-  sprintf(config_path, "%s/%s", main_path, GPSP_CONFIG_FILENAME);
-
-  FILE_OPEN(config_file, config_path, WRITE);
-
-  save_game_config_file();
-
-  if(FILE_CHECK_VALID(config_file))
-  {
-    u32 file_options[23];
-    u32 i;
-
-    file_options[0] = screen_scale;
-    file_options[1] = screen_filter;
-    file_options[2] = global_enable_audio;
-    file_options[3] = audio_buffer_size_number;
-    file_options[4] = update_backup_flag;
-    file_options[5] = global_enable_analog;
-    file_options[6] = analog_sensitivity_level;
-
-    for(i = 0; i < 16; i++)
-    {
-      file_options[7 + i] = gamepad_config_map[i];
-    }
-
-    FILE_WRITE_ARRAY(config_file, file_options);
-    FILE_CLOSE(config_file);
-
-    return 0;
-  }
-
-  return -1;
-}
-
-typedef enum
-{
-  MAIN_MENU,
-  GAMEPAD_MENU,
-  SAVESTATE_MENU,
-  FRAMESKIP_MENU,
-  CHEAT_MENU
-} menu_enum;
-
-u32 savestate_slot = 0;
-
-void get_savestate_snapshot(char *savestate_filename)
-{
-  u16 snapshot_buffer[240 * 160];
-  char savestate_timestamp_string[80];
-  char savestate_path[1024];
-  FILE_ID savestate_file;
-
-  if (default_save_dir != NULL) {
-    sprintf(savestate_path, "%s/%s", default_save_dir, savestate_filename);
-  }
-  else
-  {
-    strcpy(savestate_path, savestate_filename);
-  }
-
-  FILE_OPEN(savestate_file, savestate_path, READ);
-
-  if(FILE_CHECK_VALID(savestate_file))
-  {
-    time_t savestate_time_flat;
-    time_t local_time;
-//    u64 utc;
-//    u64 local;
-    int time_diff;
-    struct tm *current_time;
-    FILE_READ_ARRAY(savestate_file, snapshot_buffer);
-    FILE_READ_VARIABLE(savestate_file, savestate_time_flat);
-
-    FILE_CLOSE(savestate_file);
-
-    sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_TIMEZONE,&time_diff);
-    local_time = savestate_time_flat + (time_diff * 60);
-
-    current_time = localtime(&local_time);
-
-    get_timestamp_string(savestate_timestamp_string, MSG_STATE_MENU_DATE_FMT_0, current_time->tm_year + 1900, current_time->tm_mon + 1, current_time->tm_mday,
-      current_time->tm_wday, current_time->tm_hour, current_time->tm_min, current_time->tm_sec, 0);
+      update_backup_flag = file_options[4] % 2;
+      global_enable_analog = file_options[5] % 2;
+      analog_sensitivity_level = file_options[6] % 10;
 
-    savestate_timestamp_string[40] = 0;
+      /* ‰ΩïÊïÖ„Åì„Åì„ÅßÂ§âÊõ¥„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åã‰∏çÊòé„ÄÇ*/
+      /* config_file„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Å®„ÇØ„É≠„ÉÉ„ÇØ„ÅØÂ§âÊõ¥„Åï„Çå„Å™„ÅÑ„ÄÇ*/
+//      scePowerSetClockFrequency(game_config_clock_speed, game_config_clock_speed, game_config_clock_speed / 2);
 
-    print_string(savestate_timestamp_string, COLOR_HELP_TEXT, COLOR_BG, 10, 40);
-  }
-  else
-  {
-    memset(snapshot_buffer, 0, 240 * 160 * 2);
-    print_string_ext(msg[MSG_STATE_MENU_STATE_NONE], 0xFFFF, 0x0000, 15, 75, snapshot_buffer, 240, 0);
-    get_timestamp_string(savestate_timestamp_string, MSG_STATE_MENU_DATE_NONE_0, 0, 0, 0, 0, 0, 0, 0, 0);
-    print_string(savestate_timestamp_string, COLOR_HELP_TEXT, COLOR_BG, 10, 40);
-  }
-  blit_to_screen(snapshot_buffer, 240, 160, 230, 40);
-}
+      // Sanity check: Make sure there's a MENU or FRAMESKIP
+      // key, if not assign to triangle
 
-void get_savestate_filename(u32 slot, char *name_buffer)
-{
-  char savestate_ext[16];
+      for(i = 0; i < 16; i++)
+      {
+        gamepad_config_map[i] = file_options[7 + i] %
+         (BUTTON_ID_NONE + 1);
 
-  sprintf(savestate_ext, "_%d.svs", (int)slot);
-  change_ext(gamepak_filename, name_buffer, savestate_ext);
+        if(gamepad_config_map[i] == BUTTON_ID_MENU)
+        {
+          menu_button = i;
+        }
+      }
 
-  get_savestate_snapshot(name_buffer);
-}
+      if(menu_button == -1)
+      {
+        gamepad_config_map[0] = BUTTON_ID_MENU;
+      }
 
-void get_savestate_filename_noshot(u32 slot, char *name_buffer)
-{
-  char savestate_ext[16];
+      FILE_CLOSE(config_file);
+    }
 
-  sprintf(savestate_ext, "_%d.svs", (int)slot);
-  change_ext(gamepak_filename, name_buffer, savestate_ext);
-}
+    return 0;
+  }
 
-void _flush_cache()
-{
-//    sceKernelDcacheWritebackAll();
-    invalidate_all_cache();
+  return -1;
 }
 
 u32 menu(u16 *original_screen)
 {
-  u32 clock_speed_number = (game_config_clock_speed / 33) - 1;
   char print_buffer[81];
 //  u32 _current_option = 0;
   gui_action_type gui_action;
-//  menu_enum _current_menu = MAIN_MENU;
+//  MENU_ENUM _current_menu = MAIN_MENU;
   u32 i;
   u32 repeat = 1;
   u32 return_value = 0;
@@ -1001,9 +879,9 @@
   char line_buffer[80];
   char cheat_format_str[MAX_CHEATS][41];
 
-  menu_type *current_menu;
-  menu_option_type *current_option;
-  menu_option_type *display_option;
+  MENU_TYPE *current_menu;
+  MENU_OPTION_TYPE *current_option;
+  MENU_OPTION_TYPE *display_option;
   u32 current_option_num;
 
   SceCtrlData ctrl_data;
@@ -1078,7 +956,7 @@
 //    if(!update_backup_flag)
       update_backup_force();
 
-    if(load_file(file_ext, load_filename, default_rom_dir) != -1)
+    if(load_file(file_ext, load_filename, DEFAULT_ROM_DIR) != -1)
     {
        if(load_gamepak(load_filename) == -1)
        {
@@ -1108,19 +986,21 @@
 
   void menu_save_ss()
   {
-    save_ss_bmp(original_screen);
+    /* „ÄåÊú™„É≠„Éº„ÉâÔºé„Äç„ÅÆ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÅåÂá∫Êù•‰∏ä„Åå„Çä„Åæ„Åô„ÄÇ */
+    if(!first_load)
+      save_ss_bmp(original_screen);
   }
 
   void menu_change_state()
   {
-    get_savestate_filename(savestate_slot, current_savestate_filename);
+    get_savestate_filename(SAVESTATE_SLOT, current_savestate_filename);
   }
 
   void menu_save_state()
   {
     if(!first_load)
     {
-      get_savestate_filename_noshot(savestate_slot,
+      get_savestate_filename_noshot(SAVESTATE_SLOT,
        current_savestate_filename);
       save_state(current_savestate_filename, original_screen);
     }
@@ -1141,7 +1021,8 @@
   {
     char *file_ext[] = { ".svs", NULL };
     char load_filename[512];
-    if(load_file(file_ext, load_filename, default_save_dir) != -1)
+
+    if(load_file(file_ext, load_filename, DEFAULT_SAVE_DIR) != -1)
     {
       load_state(load_filename);
       return_value = 1;
@@ -1153,14 +1034,14 @@
     }
   }
 
-  // ÉÅÉjÉÖÅ[:É`Å[ÉgÉtÉ@ÉCÉãÇÃÉçÅ[Éh
+  // „É°„Éã„É•„Éº:„ÉÅ„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆ„É≠„Éº„Éâ
   void menu_load_cheat_file()
   {
     char *file_ext[] = { ".cht", NULL };
     char load_filename[MAX_FILE];
-    u32 i;
+//    u32 i;
     
-    if(load_file(file_ext, load_filename, default_cheat_dir) != -1)
+    if(load_file(file_ext, load_filename, DEFAULT_CHEAT_DIR) != -1)
     {
       add_cheats(load_filename);
       for(i = 0; i < MAX_CHEATS; i++)
@@ -1227,7 +1108,7 @@
      gamepak_code, gamepak_maker);
     print_string(print_buffer, COLOR_ROM_INFO, COLOR_BG, 10, 20);
 
-    get_savestate_filename_noshot(savestate_slot,
+    get_savestate_filename_noshot(SAVESTATE_SLOT,
      current_savestate_filename);
   }
 
@@ -1283,130 +1164,146 @@
     msg[MSG_PAD_MENU_CFG_21],
   };
 
-  // Marker for help information, don't go past this mark (except \n)------*
-  menu_option_type graphics_sound_options[] =
+  /*--------------------------------------------------------
+     „Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„Éª„Çµ„Ç¶„É≥„Éâ „Ç™„Éó„Ç∑„Éß„É≥
+  --------------------------------------------------------*/
+  MENU_OPTION_TYPE graphics_sound_options[] =
   {
-    string_selection_option(NULL, msg[MSG_G_S_MENU_0], scale_options, &screen_scale, 3, msg[MSG_G_S_MENU_HELP_0], 2),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_0], scale_options, &screen_scale, 3, msg[MSG_G_S_MENU_HELP_0], 2),
 
-    string_selection_option(NULL, msg[MSG_G_S_MENU_1], yes_no_options, &screen_filter, 2, msg[MSG_G_S_MENU_HELP_1], 3),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_1], yes_no_options, &screen_filter, 2, msg[MSG_G_S_MENU_HELP_1], 3),
 
-    string_selection_option(NULL, msg[MSG_G_S_MENU_2], frameskip_options, &game_config_frameskip_type, 3, msg[MSG_G_S_MENU_HELP_2], 5),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_2], frameskip_options, &game_config_frameskip_type, 3, msg[MSG_G_S_MENU_HELP_2], 5),
 
-    numeric_selection_option(NULL, msg[MSG_G_S_MENU_3], &game_config_frameskip_value, 100, msg[MSG_G_S_MENU_HELP_3], 6),
+    NUMERIC_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_3], &game_config_frameskip_value, 100, msg[MSG_G_S_MENU_HELP_3], 6),
 
-    string_selection_option(NULL, msg[MSG_G_S_MENU_4], frameskip_variation_options, &game_config_random_skip, 2, msg[MSG_G_S_MENU_HELP_4], 7),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_4], frameskip_variation_options, &game_config_random_skip, 2, msg[MSG_G_S_MENU_HELP_4], 7),
 
-    string_selection_option(NULL, msg[MSG_G_S_MENU_5], yes_no_options, &global_enable_audio, 2, msg[MSG_G_S_MENU_HELP_5], 9),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_5], yes_no_options, &global_enable_audio, 2, msg[MSG_G_S_MENU_HELP_5], 9),
 
-    string_selection_option(NULL, msg[MSG_G_S_MENU_6], audio_buffer_options, &audio_buffer_size_number, 10, msg[MSG_G_S_MENU_HELP_6], 11),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_G_S_MENU_6], audio_buffer_options, &audio_buffer_size_number, 11, msg[MSG_G_S_MENU_HELP_6], 11),
 
-    action_option(menu_save_ss, NULL, msg[MSG_G_S_MENU_7], msg[MSG_G_S_MENU_HELP_7], 12),
+    ACTION_OPTION(menu_save_ss, NULL, msg[MSG_G_S_MENU_7], msg[MSG_G_S_MENU_HELP_7], 12),
 
-    submenu_option(NULL, msg[MSG_G_S_MENU_8], msg[MSG_G_S_MENU_HELP_8], 14)
+    SUBMENU_OPTION(NULL, msg[MSG_G_S_MENU_8], msg[MSG_G_S_MENU_HELP_8], 14)
   };
 
-  make_menu(graphics_sound, submenu_graphics_sound, NULL);
+  MAKE_MENU(graphics_sound, submenu_graphics_sound, NULL);
 
-  menu_option_type cheats_misc_options[] =
+  /*--------------------------------------------------------
+     „ÉÅ„Éº„Éà „Ç™„Éó„Ç∑„Éß„É≥
+  --------------------------------------------------------*/
+  MENU_OPTION_TYPE cheats_misc_options[] =
   {
-    cheat_option((10 * menu_cheat_page) + 0),
-    cheat_option((10 * menu_cheat_page) + 1),
-    cheat_option((10 * menu_cheat_page) + 2),
-    cheat_option((10 * menu_cheat_page) + 3),
-    cheat_option((10 * menu_cheat_page) + 4),
-    cheat_option((10 * menu_cheat_page) + 5),
-    cheat_option((10 * menu_cheat_page) + 6),
-    cheat_option((10 * menu_cheat_page) + 7),
-    cheat_option((10 * menu_cheat_page) + 8),
-    cheat_option((10 * menu_cheat_page) + 9),
+    CHEAT_OPTION((10 * menu_cheat_page) + 0),
+    CHEAT_OPTION((10 * menu_cheat_page) + 1),
+    CHEAT_OPTION((10 * menu_cheat_page) + 2),
+    CHEAT_OPTION((10 * menu_cheat_page) + 3),
+    CHEAT_OPTION((10 * menu_cheat_page) + 4),
+    CHEAT_OPTION((10 * menu_cheat_page) + 5),
+    CHEAT_OPTION((10 * menu_cheat_page) + 6),
+    CHEAT_OPTION((10 * menu_cheat_page) + 7),
+    CHEAT_OPTION((10 * menu_cheat_page) + 8),
+    CHEAT_OPTION((10 * menu_cheat_page) + 9),
 
-    numeric_selection_option(reload_cheats_page, "cheat page: %d", &menu_cheat_page, MAX_CHEATS_PAGE, "cheat page", 10),
+    NUMERIC_SELECTION_OPTION(reload_cheats_page, "cheat page: %d", &menu_cheat_page, MAX_CHEATS_PAGE, "cheat page", 10),
 
-    action_option(menu_load_cheat_file, NULL, msg[MSG_CHEAT_MENU_1], msg[MSG_CHEAT_MENU_HELP_1], 11), 
+    ACTION_OPTION(menu_load_cheat_file, NULL, msg[MSG_CHEAT_MENU_1], msg[MSG_CHEAT_MENU_HELP_1], 11), 
 
-    string_selection_option(NULL, msg[MSG_CHEAT_MENU_2], clock_speed_options, &clock_speed_number, 10, msg[MSG_CHEAT_MENU_HELP_2], 13), 
+    STRING_SELECTION_OPTION(NULL, msg[MSG_CHEAT_MENU_2], clock_speed_options, &clock_speed_number, 10, msg[MSG_CHEAT_MENU_HELP_2], 13), 
 
-    string_selection_option(NULL, msg[MSG_CHEAT_MENU_3], update_backup_options, &update_backup_flag, 2, msg[MSG_CHEAT_MENU_HELP_3], 14), 
+    STRING_SELECTION_OPTION(NULL, msg[MSG_CHEAT_MENU_3], update_backup_options, &update_backup_flag, 2, msg[MSG_CHEAT_MENU_HELP_3], 14), 
 
-    submenu_option(NULL, msg[MSG_CHEAT_MENU_4], msg[MSG_CHEAT_MENU_HELP_4], 16) 
+    SUBMENU_OPTION(NULL, msg[MSG_CHEAT_MENU_4], msg[MSG_CHEAT_MENU_HELP_4], 16) 
   };
 
-  make_menu(cheats_misc, submenu_cheats_misc, NULL);
+  MAKE_MENU(cheats_misc, submenu_cheats_misc, NULL);
 
-  menu_option_type savestate_options[] =
+  /*--------------------------------------------------------
+     „Çª„Éº„Éñ„Çπ„ÉÜ„Éº„Éà „Ç™„Éó„Ç∑„Éß„É≥
+  --------------------------------------------------------*/
+  MENU_OPTION_TYPE savestate_options[] =
   {
-    numeric_selection_action_hide_option(menu_load_state, menu_change_state, msg[MSG_STATE_MENU_0], &savestate_slot, 10, msg[MSG_STATE_MENU_HELP_0], 6),
+    NUMERIC_SELECTION_HIDE_OPTION(menu_load_state, menu_change_state, msg[MSG_STATE_MENU_0], &SAVESTATE_SLOT, 10, msg[MSG_STATE_MENU_HELP_0], 6),
 
-    numeric_selection_action_hide_option(menu_save_state, menu_change_state, msg[MSG_STATE_MENU_1], &savestate_slot, 10, msg[MSG_STATE_MENU_HELP_1], 7),
+    NUMERIC_SELECTION_HIDE_OPTION(menu_save_state, menu_change_state, msg[MSG_STATE_MENU_1], &SAVESTATE_SLOT, 10, msg[MSG_STATE_MENU_HELP_1], 7),
 
-    numeric_selection_action_hide_option(menu_load_state_file, menu_change_state, msg[MSG_STATE_MENU_2], &savestate_slot, 10, msg[MSG_STATE_MENU_HELP_2], 9),
+    NUMERIC_SELECTION_HIDE_OPTION(menu_load_state_file, menu_change_state, msg[MSG_STATE_MENU_2], &SAVESTATE_SLOT, 10, msg[MSG_STATE_MENU_HELP_2], 9),
 
-    numeric_selection_option(menu_change_state, msg[MSG_STATE_MENU_3], &savestate_slot, 10, msg[MSG_STATE_MENU_HELP_3], 11),
+    NUMERIC_SELECTION_OPTION(menu_change_state, msg[MSG_STATE_MENU_3], &SAVESTATE_SLOT, 10, msg[MSG_STATE_MENU_HELP_3], 11),
 
-    submenu_option(NULL, msg[MSG_STATE_MENU_4], msg[MSG_STATE_MENU_HELP_4], 13)
+    SUBMENU_OPTION(NULL, msg[MSG_STATE_MENU_4], msg[MSG_STATE_MENU_HELP_4], 13)
   };
 
-  make_menu(savestate, submenu_savestate, NULL);
+  MAKE_MENU(savestate, submenu_savestate, NULL);
 
-  menu_option_type gamepad_config_options[] =
-  {
-    gamepad_config_option(msg[MSG_PAD_MENU_0], 0),
-    gamepad_config_option(msg[MSG_PAD_MENU_1], 1),
-    gamepad_config_option(msg[MSG_PAD_MENU_2], 2),
-    gamepad_config_option(msg[MSG_PAD_MENU_3], 3),
-    gamepad_config_option(msg[MSG_PAD_MENU_4], 4),
-    gamepad_config_option(msg[MSG_PAD_MENU_5], 5),
-    gamepad_config_option(msg[MSG_PAD_MENU_6], 6),
-    gamepad_config_option(msg[MSG_PAD_MENU_7], 7),
-    gamepad_config_option(msg[MSG_PAD_MENU_8], 8),
-    gamepad_config_option(msg[MSG_PAD_MENU_9], 9),
-    gamepad_config_option(msg[MSG_PAD_MENU_10], 10),
-    gamepad_config_option(msg[MSG_PAD_MENU_11], 11),
-    submenu_option(NULL, msg[MSG_PAD_MENU_12], msg[MSG_PAD_MENU_HELP_0], 13)
+  /*--------------------------------------------------------
+     „Ç≤„Éº„É†„Éë„ÉÉ„Éâ „Ç™„Éó„Ç∑„Éß„É≥
+  --------------------------------------------------------*/
+  MENU_OPTION_TYPE gamepad_config_options[] =
+  {
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_0], 0),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_1], 1),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_2], 2),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_3], 3),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_4], 4),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_5], 5),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_6], 6),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_7], 7),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_8], 8),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_9], 9),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_10], 10),
+    GAMEPAD_CONFIG_OPTION(msg[MSG_PAD_MENU_11], 11),
+
+    SUBMENU_OPTION(NULL, msg[MSG_PAD_MENU_12], msg[MSG_PAD_MENU_HELP_0], 13)
   };
 
-  menu_option_type analog_config_options[] =
-  {
-    analog_config_option(msg[MSG_A_PAD_MENU_0], 0),
-    analog_config_option(msg[MSG_A_PAD_MENU_1], 1),
-    analog_config_option(msg[MSG_A_PAD_MENU_2], 2),
-    analog_config_option(msg[MSG_A_PAD_MENU_3], 3),
-    string_selection_option(NULL, msg[MSG_A_PAD_MENU_4], yes_no_options, &global_enable_analog, 2, msg[MSG_A_PAD_MENU_HELP_0], 7),
-    numeric_selection_option(NULL, msg[MSG_A_PAD_MENU_5], &analog_sensitivity_level, 10, msg[MSG_A_PAD_MENU_HELP_1], 8),
-    submenu_option(NULL, msg[MSG_A_PAD_MENU_6], msg[MSG_A_PAD_MENU_HELP_2], 11)
+  MAKE_MENU(gamepad_config, submenu_gamepad, NULL);
+
+  /*--------------------------------------------------------
+     „Ç¢„Éä„É≠„Ç∞„Éë„ÉÉ„Éâ „Ç™„Éó„Ç∑„Éß„É≥
+  --------------------------------------------------------*/
+  MENU_OPTION_TYPE analog_config_options[] =
+  {
+    ANALOG_CONFIG_OPTION(msg[MSG_A_PAD_MENU_0], 0),
+    ANALOG_CONFIG_OPTION(msg[MSG_A_PAD_MENU_1], 1),
+    ANALOG_CONFIG_OPTION(msg[MSG_A_PAD_MENU_2], 2),
+    ANALOG_CONFIG_OPTION(msg[MSG_A_PAD_MENU_3], 3),
+    STRING_SELECTION_OPTION(NULL, msg[MSG_A_PAD_MENU_4], yes_no_options, &global_enable_analog, 2, msg[MSG_A_PAD_MENU_HELP_0], 7),
+    NUMERIC_SELECTION_OPTION(NULL, msg[MSG_A_PAD_MENU_5], &analog_sensitivity_level, 10, msg[MSG_A_PAD_MENU_HELP_1], 8),
+    SUBMENU_OPTION(NULL, msg[MSG_A_PAD_MENU_6], msg[MSG_A_PAD_MENU_HELP_2], 11)
   };
 
-  make_menu(gamepad_config, submenu_gamepad, NULL);
-  make_menu(analog_config, submenu_analog, NULL);
+  MAKE_MENU(analog_config, submenu_analog, NULL);
 
-  menu_option_type main_options[] =
+  MENU_OPTION_TYPE main_options[] =
   {
-    submenu_option(&graphics_sound_menu, msg[MSG_MAIN_MENU_0], msg[MSG_MAIN_MENU_HELP_0], 0), 
+    SUBMENU_OPTION(&graphics_sound_menu, msg[MSG_MAIN_MENU_0], msg[MSG_MAIN_MENU_HELP_0], 0), 
 
-    numeric_selection_action_option(menu_load_state, NULL, msg[MSG_MAIN_MENU_1], &savestate_slot, 10, msg[MSG_MAIN_MENU_HELP_1], 2),
+    NUMERIC_SELECTION_ACTION_OPTION(menu_load_state, NULL, msg[MSG_MAIN_MENU_1], &SAVESTATE_SLOT, 10, msg[MSG_MAIN_MENU_HELP_1], 2),
 
-    numeric_selection_action_option(menu_save_state, NULL, msg[MSG_MAIN_MENU_2], &savestate_slot, 10, msg[MSG_MAIN_MENU_HELP_2], 3),
+    NUMERIC_SELECTION_ACTION_OPTION(menu_save_state, NULL, msg[MSG_MAIN_MENU_2], &SAVESTATE_SLOT, 10, msg[MSG_MAIN_MENU_HELP_2], 3),
 
-    submenu_option(&savestate_menu, msg[MSG_MAIN_MENU_3], msg[MSG_MAIN_MENU_HELP_3], 4),
+    SUBMENU_OPTION(&savestate_menu, msg[MSG_MAIN_MENU_3], msg[MSG_MAIN_MENU_HELP_3], 4),
 
-    submenu_option(&gamepad_config_menu, msg[MSG_MAIN_MENU_4], msg[MSG_MAIN_MENU_HELP_4], 6),
+    SUBMENU_OPTION(&gamepad_config_menu, msg[MSG_MAIN_MENU_4], msg[MSG_MAIN_MENU_HELP_4], 6),
 
-    submenu_option(&analog_config_menu, msg[MSG_MAIN_MENU_5], msg[MSG_MAIN_MENU_HELP_5], 7),
+    SUBMENU_OPTION(&analog_config_menu, msg[MSG_MAIN_MENU_5], msg[MSG_MAIN_MENU_HELP_5], 7),
 
-    submenu_option(&cheats_misc_menu, msg[MSG_MAIN_MENU_6], msg[MSG_MAIN_MENU_HELP_6], 9),
+    SUBMENU_OPTION(&cheats_misc_menu, msg[MSG_MAIN_MENU_6], msg[MSG_MAIN_MENU_HELP_6], 9),
 
-    action_option(menu_load, NULL, msg[MSG_MAIN_MENU_7], msg[MSG_MAIN_MENU_HELP_7], 11),
+    ACTION_OPTION(menu_load, NULL, msg[MSG_MAIN_MENU_7], msg[MSG_MAIN_MENU_HELP_7], 11),
 
-    action_option(menu_restart, NULL, msg[MSG_MAIN_MENU_8], msg[MSG_MAIN_MENU_HELP_8], 12), 
+    ACTION_OPTION(menu_restart, NULL, msg[MSG_MAIN_MENU_8], msg[MSG_MAIN_MENU_HELP_8], 12), 
 
-    action_option(menu_exit, NULL, msg[MSG_MAIN_MENU_9], msg[MSG_MAIN_MENU_HELP_9], 13), 
+    ACTION_OPTION(menu_exit, NULL, msg[MSG_MAIN_MENU_9], msg[MSG_MAIN_MENU_HELP_9], 13), 
 
-    action_option(menu_quit, NULL, msg[MSG_MAIN_MENU_10], msg[MSG_MAIN_MENU_HELP_10], 15) 
+    ACTION_OPTION(menu_quit, NULL, msg[MSG_MAIN_MENU_10], msg[MSG_MAIN_MENU_HELP_10], 15) 
   };
 
-  make_menu(main, submenu_main, NULL);
+  MAKE_MENU(main, submenu_main, NULL);
 
-  void choose_menu(menu_type *new_menu)
+  void choose_menu(MENU_TYPE *new_menu)
   {
     if(new_menu == NULL)
       new_menu = &main_menu;
@@ -1415,6 +1312,7 @@
     blit_to_screen(original_screen, 240, 160, 230, 40);
 
     current_menu = new_menu;
+
     current_option = new_menu->options;
     current_option_num = 0;
     if(current_menu->init_function)
@@ -1444,6 +1342,9 @@
   SDL_PauseAudio(1);
   SDL_UnlockMutex(sound_mutex);
 
+  clock_speed_number = (game_config_clock_speed / 33) - 1;
+  set_cpu_clock(222);
+
   if(gamepak_filename[0] == 0)
   {
     first_load = 1;
@@ -1451,6 +1352,12 @@
     print_string_ext(msg[MSG_NON_LOAD_GAME], 0xFFFF, 0x0000, 60, 75,original_screen, 240, 0);
   }
 
+  if(FILE_CHECK_VALID(gamepak_file_large))
+  {
+    FILE_CLOSE(gamepak_file_large);
+    gamepak_file_large = -2;
+  }
+
   choose_menu(&main_menu);
 
   for(i = 0; i < MAX_CHEATS; i++)
@@ -1478,14 +1385,14 @@
 
     for(i = 0; i < current_menu->num_options; i++, display_option++)
     {
-      if(display_option->option_type & NUMBER_SELECTION_OPTION)
+      if(display_option->option_type & NUMBER_SELECTION_TYPE)
       {
         sprintf(line_buffer, display_option->display_string,
          *(display_option->current_option));
       }
       else
 
-      if(display_option->option_type & STRING_SELECTION_OPTION)
+      if(display_option->option_type & STRING_SELECTION_TYPE)
       {
         sprintf(line_buffer, display_option->display_string,
          ((u32 *)display_option->options)[*(display_option->current_option)]);
@@ -1507,8 +1414,7 @@
       }
     }
 
-    print_string(current_option->help_string, COLOR_HELP_TEXT,
-     COLOR_BG, 30, 210);
+    print_string(current_option->help_string, COLOR_HELP_TEXT, COLOR_BG, 30, 210);
 
     flip_screen();
 
@@ -1535,8 +1441,8 @@
         break;
 
       case CURSOR_RIGHT:
-        if(current_option->option_type & (NUMBER_SELECTION_OPTION |
-         STRING_SELECTION_OPTION))
+        if(current_option->option_type & (NUMBER_SELECTION_TYPE |
+         STRING_SELECTION_TYPE))
         {
           *(current_option->current_option) =
            (*current_option->current_option + 1) %
@@ -1548,8 +1454,8 @@
         break;
 
       case CURSOR_LEFT:
-        if(current_option->option_type & (NUMBER_SELECTION_OPTION |
-         STRING_SELECTION_OPTION))
+        if(current_option->option_type & (NUMBER_SELECTION_TYPE |
+         STRING_SELECTION_TYPE))
         {
           u32 current_option_val = *(current_option->current_option);
 
@@ -1573,10 +1479,10 @@
         break;
 
       case CURSOR_SELECT:
-        if(current_option->option_type & ACTION_OPTION)
+        if(current_option->option_type & ACTION_TYPE)
           current_option->action_function();
 
-        if(current_option->option_type & SUBMENU_OPTION)
+        if(current_option->option_type & SUBMENU_TYPE)
           choose_menu(current_option->sub_menu);
         break;
 
@@ -1586,16 +1492,38 @@
     }
   }
 
-// menuèIóπéûÇÃèàóù
+// menuÁµÇ‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
+
+  /* „Çπ„É™„Éº„Éó„Åã„ÇâÂæ©Â∏∞Áõ¥Âæå„Å´„ÅØ„Éï„Ç°„Ç§„É´„ÇíÈñã„Åë„Å™„ÅÑ„ÄÇ*/
+  /* „Çø„Ç§„Éü„É≥„Ç∞„Å´„Çà„Å£„Å¶„ÄÅÈñã„Åë„ÇãÊßò„Å´„Å™„Çã„Åæ„Åß„ÅÆÊôÇÈñì„Å´„Å∞„Çâ„Å§„Åç„Åå„ÅÇ„Çã„ÄÇ */
+  /* „Åô„Åê„Å´„Éï„Ç°„Ç§„É´Èñã„Åë„Çã„Çà„ÅÜ„Å™„ÇâÂç≥Âæ©Â∏∞„Åï„Åõ„Åü„ÅÑ„ÅÆ„Åß„ÄÅ„Ç¶„Çß„Ç§„Éà„ÅØÁü≠„ÇÅ */
+  /* „Åß„É™„Éà„É©„Ç§„Åï„Åõ„Çã„ÄÇ */
+  if(gamepak_file_large == -2)
+  {
+    for(i = 0; i < 5; i++)
+    {
+      FILE_OPEN(gamepak_file_large, gamepak_filename_raw, READ);
+
+      if(gamepak_file_large < 0)
+        delay_us(500000);
+      else
+        goto success_open_gamepak;
+    }
+
+    printf("Failed to load gemepak.\n");
+    delay_us(3000000);
+    quit();
+
+    success_open_gamepak:;
+  }
 
   while(sceCtrlPeekBufferPositive(&ctrl_data, 1), ctrl_data.Buttons != 0);
 
   set_gba_resolution(screen_scale);
   video_resolution_small();
 
-  game_config_clock_speed = (clock_speed_number + 1) * 33;
-
-  scePowerSetClockFrequency(game_config_clock_speed, game_config_clock_speed, game_config_clock_speed / 2);
+  game_config_clock_speed = (clock_speed_number + 1) * 333 / 10;
+  set_cpu_clock(game_config_clock_speed);
 
   SDL_PauseAudio(0);
 
@@ -1627,10 +1555,10 @@
         {
           case 0:
             if(opendir(current_str) != NULL)
-              strcpy(default_rom_dir,current_str);
+              strcpy(DEFAULT_ROM_DIR,current_str);
             else
             {
-              *default_rom_dir = (char)NULL;
+              *DEFAULT_ROM_DIR = (char)NULL;
               printf("not open rom dir : %s\n",current_str);
               delay_us(500000);
             }
@@ -1639,10 +1567,10 @@
 
           case 1:
             if(opendir(current_str) != NULL)
-              strcpy(default_save_dir,current_str);
+              strcpy(DEFAULT_SAVE_DIR,current_str);
             else
             {
-              *default_save_dir = (char)NULL;
+              *DEFAULT_SAVE_DIR = (char)NULL;
               printf("not open save dir : %s\n",current_str);
               delay_us(500000);
             }
@@ -1651,10 +1579,10 @@
 
           case 2:
             if(opendir(current_str) != NULL)
-              strcpy(default_cfg_dir,current_str);
+              strcpy(DEFAULT_CFG_DIR,current_str);
             else
             {
-              *default_cfg_dir = (char)NULL;
+              *DEFAULT_CFG_DIR = (char)NULL;
               printf("not open cfg dir : %s\n",current_str);
               delay_us(500000);
             }
@@ -1663,10 +1591,10 @@
 
           case 3:
             if(opendir(current_str) != NULL)
-              strcpy(default_ss_dir,current_str);
+              strcpy(DEFAULT_SS_DIR,current_str);
             else
             {
-              *default_ss_dir = (char)NULL;
+              *DEFAULT_SS_DIR = (char)NULL;
               printf("not open screen shot dir : %s\n",current_str);
               delay_us(500000);
             }
@@ -1675,10 +1603,10 @@
 
           case 4:
             if(opendir(current_str) != NULL)
-              strcpy(default_cheat_dir,current_str);
+              strcpy(DEFAULT_CHEAT_DIR,current_str);
             else
             {
-              *default_cheat_dir = (char)NULL;
+              *DEFAULT_CHEAT_DIR = (char)NULL;
               printf("not open cheat dir : %s\n",current_str);
               delay_us(500000);
             }
@@ -1804,7 +1732,166 @@
   return -1;
 }
 
-u32 parse_line(char *current_line, char *current_str)
+u32 load_font()
+{
+    return fbm_init(font8,font16,1);
+}
+
+void get_savestate_filename_noshot(u32 slot, char *name_buffer)
+{
+  char savestate_ext[16];
+
+  sprintf(savestate_ext, "_%d.svs", (int)slot);
+  change_ext(gamepak_filename, name_buffer, savestate_ext);
+}
+
+/******************************************************************************
+ * „É≠„Éº„Ç´„É´Èñ¢Êï∞„ÅÆÂÆöÁæ©
+ ******************************************************************************/
+static s32 save_game_config_file()
+{
+  char game_config_filename[MAX_FILE];
+  char game_config_path[MAX_PATH];
+  u32 i;
+  FILE_ID game_config_file;
+
+  if(gamepak_filename[0] == 0) return -1;
+
+  change_ext(gamepak_filename, game_config_filename, ".cfg");
+
+  if (DEFAULT_CFG_DIR != NULL) {
+    sprintf(game_config_path, "%s/%s", DEFAULT_CFG_DIR, game_config_filename);
+  }
+  else
+  {
+    strcpy(game_config_path, game_config_filename);
+  }
+
+  FILE_OPEN(game_config_file, game_config_path, WRITE);
+  if(FILE_CHECK_VALID(game_config_file))
+  {
+    u32 file_options[4 + MAX_CHEATS];
+
+    file_options[0] = game_config_frameskip_type;
+    file_options[1] = game_config_frameskip_value;
+    file_options[2] = game_config_random_skip;
+    file_options[3] = game_config_clock_speed;
+
+    for(i = 0; i < MAX_CHEATS; i++)
+    {
+      file_options[4 + i] = game_config_cheats[i].cheat_active;
+    }
+
+    FILE_WRITE_ARRAY(game_config_file, file_options);
+    FILE_CLOSE(game_config_file);
+
+    return 0;
+  }
+
+  return -1;
+}
+
+static s32 save_config_file()
+{
+  char config_path[512];
+  FILE_ID config_file;
+
+  sprintf(config_path, "%s/%s", main_path, GPSP_CONFIG_FILENAME);
+
+  FILE_OPEN(config_file, config_path, WRITE);
+
+  save_game_config_file();
+
+  if(FILE_CHECK_VALID(config_file))
+  {
+    u32 file_options[23];
+    u32 i;
+
+    file_options[0] = screen_scale;
+    file_options[1] = screen_filter;
+    file_options[2] = global_enable_audio;
+    file_options[3] = audio_buffer_size_number;
+    file_options[4] = update_backup_flag;
+    file_options[5] = global_enable_analog;
+    file_options[6] = analog_sensitivity_level;
+
+    for(i = 0; i < 16; i++)
+    {
+      file_options[7 + i] = gamepad_config_map[i];
+    }
+
+    FILE_WRITE_ARRAY(config_file, file_options);
+    FILE_CLOSE(config_file);
+
+    return 0;
+  }
+
+  return -1;
+}
+
+static void get_savestate_snapshot(char *savestate_filename)
+{
+  u16 snapshot_buffer[240 * 160];
+  char savestate_timestamp_string[80];
+  char savestate_path[1024];
+  FILE_ID savestate_file;
+
+  if (DEFAULT_SAVE_DIR != NULL) {
+    sprintf(savestate_path, "%s/%s", DEFAULT_SAVE_DIR, savestate_filename);
+  }
+  else
+  {
+    strcpy(savestate_path, savestate_filename);
+  }
+
+  FILE_OPEN(savestate_file, savestate_path, READ);
+
+  if(FILE_CHECK_VALID(savestate_file))
+  {
+    u64 savestate_time_flat;
+    u64 local_time;
+//    u64 utc;
+//    u64 local;
+    int wday;
+    int time_diff;
+    pspTime current_time;
+    FILE_READ_ARRAY(savestate_file, snapshot_buffer);
+    FILE_READ_VARIABLE(savestate_file, savestate_time_flat);
+
+    FILE_CLOSE(savestate_file);
+
+    sceRtcConvertUtcToLocalTime(&savestate_time_flat, &local_time);
+
+    sceRtcSetTick(&current_time, &local_time);
+    wday = sceRtcGetDayOfWeek(current_time.year, current_time.month, current_time.day);
+    get_timestamp_string(savestate_timestamp_string, MSG_STATE_MENU_DATE_FMT_0, current_time.year, current_time.month, current_time.day,
+      wday, current_time.hour, current_time.minutes, current_time.seconds, 0);
+
+    savestate_timestamp_string[40] = 0;
+
+    print_string(savestate_timestamp_string, COLOR_HELP_TEXT, COLOR_BG, 10, 40);
+  }
+  else
+  {
+    memset(snapshot_buffer, 0, 240 * 160 * 2);
+    print_string_ext(msg[MSG_STATE_MENU_STATE_NONE], 0xFFFF, 0x0000, 15, 75, snapshot_buffer, 240, 0);
+    get_timestamp_string(savestate_timestamp_string, MSG_STATE_MENU_DATE_NONE_0, 0, 0, 0, 0, 0, 0, 0, 0);
+    print_string(savestate_timestamp_string, COLOR_HELP_TEXT, COLOR_BG, 10, 40);
+  }
+  blit_to_screen(snapshot_buffer, 240, 160, 230, 40);
+}
+
+static void get_savestate_filename(u32 slot, char *name_buffer)
+{
+  char savestate_ext[16];
+
+  sprintf(savestate_ext, "_%d.svs", (int)slot);
+  change_ext(gamepak_filename, name_buffer, savestate_ext);
+
+  get_savestate_snapshot(name_buffer);
+}
+
+static u32 parse_line(char *current_line, char *current_str)
 {
   char *line_ptr;
   char *line_ptr_new;
@@ -1842,12 +1929,7 @@
   return 0;
 }
 
-u32 load_font()
-{
-    return fbm_init(font8,font16,1);
-}
-
-void print_status()
+static void print_status()
 {
   char print_buffer_1[256];
   char print_buffer_2[256];
@@ -1864,24 +1946,23 @@
   sprintf(print_buffer_1, msg[MSG_MENU_BATTERY], scePowerGetBatteryLifePercent(), scePowerGetBatteryLifeTime());
   print_string(print_buffer_1, COLOR_HELP_TEXT, COLOR_BG, 240, 0);
 
-//  sprintf(print_buffer_1, "TOTAL FREE:%04dkb  MAX FREE:%04dkb", sceKernelTotalFreeMemSize()/1024, sceKernelMaxFreeMemSize()/1024);
-//  print_string(print_buffer_1, COLOR_HELP_TEXT, COLOR_BG, 240, 10);
-
   sprintf(print_buffer_1, "MAX ROM BUF: %02d MB", (int)(gamepak_ram_buffer_size/1024/1024));
   print_string(print_buffer_1, COLOR_HELP_TEXT, COLOR_BG, 240, 10);
 }
 
-void get_timestamp_string(char *buffer, u16 msg_id, u16 year, u16 mon, u16 day, u16 wday, u16 hour, u16 min, u16 sec, u32 msec)
+static void get_timestamp_string(char *buffer, u16 msg_id, u16 year, u16 mon, u16 day, u16 wday, u16 hour, u16 min, u16 sec, u32 msec)
 {
-  int id;
+//  int id;
   char *weekday_strings[] =
   {
     msg[MSG_WDAY_0], msg[MSG_WDAY_1], msg[MSG_WDAY_2], msg[MSG_WDAY_3],
     msg[MSG_WDAY_4], msg[MSG_WDAY_5], msg[MSG_WDAY_6], ""
   };
 
-  sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_DATE_FORMAT,&id);
-  switch(id)
+  /* Ë°®Á§∫Êõ¥Êñ∞„ÅÆÂ∫¶„Å´„Éï„É©„ÉÉ„Ç∑„É•„Åã„ÇâË®≠ÂÆö„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Çã„Åü„ÇÅ„É°„Éã„É•„Éº„ÅÆÂãï‰Ωú„ÅåÈÅÖ„ÅÑ„ÄÇ*/
+//  sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_DATE_FORMAT,&id);
+//  switch(id)
+  switch(date_format)
   {
     case PSP_SYSTEMPARAM_DATE_FORMAT_YYYYMMDD:
       sprintf(buffer, msg[msg_id    ], year, mon, day, weekday_strings[wday], hour, min, sec, msec / 1000);
@@ -1895,7 +1976,7 @@
   }
 }
 
-void save_ss_bmp(u16 *image)
+static void save_ss_bmp(u16 *image)
 {
   static unsigned char header[] ={ 'B',  'M',  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00,
                                    0x00, 0x00,  240, 0x00, 0x00, 0x00,  160, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00,
@@ -1918,8 +1999,8 @@
   get_timestamp_string(timestamp, MSG_SS_FMT_0, current_time.year, current_time.month , current_time.day, 7,
     current_time.hour, current_time.minutes, current_time.seconds, current_time.microseconds);
 
-  if (default_ss_dir != NULL) {
-    sprintf(save_ss_path, "%s/%s%s.bmp", default_ss_dir, ss_filename, timestamp);
+  if (DEFAULT_SS_DIR != NULL) {
+    sprintf(save_ss_path, "%s/%s%s.bmp", DEFAULT_SS_DIR, ss_filename, timestamp);
   }
   else
   {
@@ -1949,3 +2030,87 @@
     fclose( ss );
 
 }
+
+#ifdef progress
+/******************************************************************************
+  „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºË°®Á§∫
+******************************************************************************/
+
+static int progress_total;
+static int progress_current;
+static char progress_message[64];
+
+/*--------------------------------------------------------
+  „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÂàùÊúüÂåñ
+--------------------------------------------------------*/
+
+void init_progress(int total, const char *text)
+{
+  progress_current = 0;
+  progress_total   = total;
+  strcpy(progress_message, text);
+
+  draw_dialog(240-158, 136-26, 240+158, 136+26);
+  boxfill(240-151, 138+2, 240+151, 138+14, 0, 0, 0);
+
+  uifont_print_shadow_center(118, 255,255,255, text);
+  draw_battery_status(1);
+
+  video_flip_screen(1);
+}
+
+
+/*--------------------------------------------------------
+  „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÊõ¥Êñ∞
+--------------------------------------------------------*/
+
+void update_progress(void)
+{
+  int width = (++progress_current * 100 / progress_total) * 3;
+
+  show_background();
+
+  draw_dialog(240-158, 136-26, 240+158, 136+26);
+  boxfill(240-151, 138+2, 240+151, 138+14, 0, 0, 0);
+
+  uifont_print_shadow_center(118, 255,255,255, progress_message);
+  draw_battery_status(1);
+
+  boxfill(240-150, 138+3, 240-150+width-1, 138+13, 128, 128, 128);
+
+  video_flip_screen(1);
+}
+
+
+/*--------------------------------------------------------
+  „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÁµêÊûúË°®Á§∫
+--------------------------------------------------------*/
+
+void show_progress(const char *text)
+{
+  show_background();
+
+  draw_dialog(240-158, 136-26, 240+158, 136+26);
+  boxfill(240-151, 138+2, 240+151, 138+14, 0, 0, 0);
+
+  uifont_print_shadow_center(118, 255,255,255, text);
+  draw_battery_status(1);
+
+  if (progress_current)
+  {
+    int width = (progress_current * 100 / progress_total) * 3;
+    boxfill(240-150, 138+3, 240-150+width-1, 138+13, 128, 128, 128);
+  }
+
+  video_flip_screen(1);
+
+  sceKernelDelayThread(1000000);
+}
+#endif
+
+void _flush_cache()
+{
+//    sceKernelDcacheWritebackAll();
+    invalidate_all_cache();
+}
+
diff -ru 30_orig/gui.h 30_new/gui.h
--- 30_orig/gui.h	2007-08-16 14:57:05.827000000 +0900
+++ 30_new/gui.h	2007-08-05 23:04:12.000000000 +0900
@@ -18,40 +18,36 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
+/******************************************************************************
+ * gui.h
+ * guiÂë®„Çä„ÅÆÂá¶ÁêÜ
+ ******************************************************************************/
 #ifndef GUI_H
 #define GUI_H
 
-#define GPSP_CONFIG_FILENAME "gpsp.cfg"
-
+/******************************************************************************
+ * „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„ÅÆÂÆ£Ë®Ä
+ ******************************************************************************/
+extern u32 SAVESTATE_SLOT;
+extern char DEFAULT_ROM_DIR[512];
+extern char DEFAULT_SAVE_DIR[512];
+extern char DEFAULT_CFG_DIR[512];
+extern char DEFAULT_SS_DIR[512];
+extern char DEFAULT_CHEAT_DIR[512];
+
+/******************************************************************************
+ * „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„ÅÆÂÆ£Ë®Ä
+ ******************************************************************************/
 s32 load_file(char **wildcards, char *result, char *default_dir_name);
-u32 adjust_frameskip(u32 button_id);
 s32 load_game_config_file();
 s32 load_config_file();
-s32 save_game_config_file();
-s32 save_config_file();
 u32 menu(u16 *original_screen);
 
 u32 load_dircfg(char *file_name);
 u32 load_fontcfg(char *file_name);
 u32 load_msgcfg(char *file_name);
-u32 parse_line(char *current_line, char *current_str);
 u32 load_font();
-
-void print_status();
-void get_timestamp_string(char *buffer, u16 msg_id, u16 year, u16 mon, u16 day, u16 wday, u16 hour, u16 min, u16 sec, u32 msec);
-void save_ss_bmp(u16 *image);
-
-extern u32 savestate_slot;
-
 void get_savestate_filename_noshot(u32 slot, char *name_buffer);
-void get_savestate_filename(u32 slot, char *name_buffer);
-void get_savestate_snapshot(char *savestate_filename);
-
-extern char default_rom_dir[512];
-extern char default_save_dir[512];
-extern char default_cfg_dir[512];
-extern char default_ss_dir[512];
-extern char default_cheat_dir[512];
 
 #endif
 
diff -ru 30_orig/input.c 30_new/input.c
--- 30_orig/input.c	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/input.c	2007-08-06 23:46:08.000000000 +0900
@@ -104,19 +104,24 @@
     quit();
 
   sceCtrlPeekBufferPositive(&ctrl_data, 1);
-  ctrl_data.Buttons &= PSP_ALL_BUTTON_MASK;
 
-  if(ctrl_data.Lx < analog_sensitivity)
-    ctrl_data.Buttons = PSP_CTRL_LEFT;
+  /* HOLDÊôÇ„Ç¢„Éä„É≠„Ç∞PAD„ÇÇÂãï‰Ωú„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã */
+  if(!(ctrl_data.Buttons & PSP_CTRL_HOLD))
+  {
+    if(ctrl_data.Lx < analog_sensitivity)
+      ctrl_data.Buttons = PSP_CTRL_LEFT;
 
-  if(ctrl_data.Lx > inv_analog_sensitivity)
-    ctrl_data.Buttons = PSP_CTRL_RIGHT;
+    if(ctrl_data.Lx > inv_analog_sensitivity)
+      ctrl_data.Buttons = PSP_CTRL_RIGHT;
 
-  if(ctrl_data.Ly < analog_sensitivity)
-    ctrl_data.Buttons = PSP_CTRL_UP;
+    if(ctrl_data.Ly < analog_sensitivity)
+      ctrl_data.Buttons = PSP_CTRL_UP;
 
-  if(ctrl_data.Ly > inv_analog_sensitivity)
-    ctrl_data.Buttons = PSP_CTRL_DOWN;
+    if(ctrl_data.Ly > inv_analog_sensitivity)
+      ctrl_data.Buttons = PSP_CTRL_DOWN;
+  }
+
+  ctrl_data.Buttons &= PSP_ALL_BUTTON_MASK;
 
   new_buttons = (last_buttons ^ ctrl_data.Buttons) & ctrl_data.Buttons;
   last_buttons = ctrl_data.Buttons;
@@ -260,7 +265,8 @@
 
   buttons = ctrl_data.Buttons;
 
-  if(global_enable_analog)
+  /* HOLDÊôÇ„Ç¢„Éä„É≠„Ç∞PAD„ÇÇÂãï‰Ωú„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã */
+  if((global_enable_analog) && !(ctrl_data.Buttons & PSP_CTRL_HOLD))
   {
     if(ctrl_data.Lx < analog_sensitivity)
       buttons |= PSP_CTRL_ANALOG_LEFT;
@@ -297,7 +303,7 @@
       case BUTTON_ID_LOADSTATE:
       {
         char current_savestate_filename[512];
-        get_savestate_filename_noshot(savestate_slot, current_savestate_filename);
+        get_savestate_filename_noshot(SAVESTATE_SLOT, current_savestate_filename);
         load_state(current_savestate_filename);
         return 1;
       }
@@ -306,7 +312,7 @@
       {
         char current_savestate_filename[512];
         u16 *current_screen = copy_screen();
-        get_savestate_filename_noshot(savestate_slot,
+        get_savestate_filename_noshot(SAVESTATE_SLOT,
          current_savestate_filename);
         save_state(current_savestate_filename, current_screen);
         free(current_screen);
diff -ru 30_orig/main.c 30_new/main.c
--- 30_orig/main.c	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/main.c	2007-08-06 23:47:24.000000000 +0900
@@ -19,32 +19,25 @@
  */
 
 /******************************************************************************
- * ÉwÉbÉ_ÉtÉ@ÉCÉãÇÃì«çûÇ›
+ * „Éò„ÉÉ„ÉÄ„Éï„Ç°„Ç§„É´„ÅÆË™≠Ëæº„Åø
  ******************************************************************************/
 #include "common.h"
 
-// SDLÇégópÇµÇƒÇ¢ÇÈÇÃïsïKóv
-//PSP_MODULE_INFO("gpSP", 0x1000, 0, 9);
+// ÊîπÈÄ†SDL„Çí‰ΩøÁî®„Åó„ÄÅ„Ç´„Éº„Éç„É´„É¢„Éº„Éâ„Å´Ë®≠ÂÆö
+// PSP_MODULE_INFO("gpSP", 0x1000, VERSION_MAJOR, VERSION_MINOR);
 //PSP_MAIN_THREAD_ATTR(PSP_THREAD_ATTR_USER | PSP_THREAD_ATTR_VFPU);
+// PSP_MAIN_THREAD_ATTR(0);
+
 
 /******************************************************************************
- * ïœêîÇÃíËã`
+ * Â§âÊï∞„ÅÆÂÆöÁæ©
  ******************************************************************************/
 
-TIMER_TYPE timer[4];
-
-// ÉtÉåÅ[ÉÄÉXÉLÉbÉvÇÃéÌóﬁ
-u32 game_config_frameskip_type = auto_frameskip;
-
-// ÉtÉåÅ[ÉÄÉXÉLÉbÉvêî
-u32 game_config_frameskip_value = 4;
-
-// ÉâÉìÉ_ÉÄÉXÉLÉbÉv
-u32 game_config_random_skip = 0;
-
-// ÉNÉçÉbÉNêî
-u32 game_config_clock_speed = 333;
-
+TIMER_TYPE timer[4];                              // „Çø„Ç§„Éû„Éº
+u32 game_config_frameskip_type = auto_frameskip;  // „Éï„É¨„Éº„É†„Çπ„Ç≠„ÉÉ„Éó„ÅÆÁ®ÆÈ°û
+u32 game_config_frameskip_value = 9;              // „Éï„É¨„Éº„É†„Çπ„Ç≠„ÉÉ„ÉóÊï∞
+u32 game_config_random_skip = 0;                  // „É©„É≥„ÉÄ„É†„Çπ„Ç≠„ÉÉ„Éó„ÅÆon/off
+u32 game_config_clock_speed = 333;                // „ÇØ„É≠„ÉÉ„ÇØÊï∞
 
 u32 global_cycles_per_instruction = 1;
 u64 frame_count_initial_timestamp = 0;
@@ -82,7 +75,8 @@
 char main_path[MAX_PATH];
 
 u32 quit_flag;
-u32 power_flag;
+// u32 power_flag;
+u8 sleep_flag;
 
 char *lang[9] =
   { "japanese",   // 0
@@ -97,13 +91,14 @@
     };
 
 int lang_num;
+int date_format;
 
 u32 prescale_table[] = { 0, 6, 8, 10 };
 
 char *file_ext[] = { ".gba", ".bin", ".zip", NULL };
 
 /******************************************************************************
- * É}ÉNÉçìôÇÃíËã`
+ * „Éû„ÇØ„É≠Á≠â„ÅÆÂÆöÁæ©
  ******************************************************************************/
 
 #define CHECK_COUNT(count_var)                                                \
@@ -121,7 +116,7 @@
     {                                                                         \
       timer[timer_number].count -= execute_cycles;                            \
       io_registers[REG_TM##timer_number##D] =                                 \
-       0xFFFF - (timer[timer_number].count >> timer[timer_number].prescale); \
+       0xFFFF - (timer[timer_number].count >> timer[timer_number].prescale);  \
     }                                                                         \
                                                                               \
     if(timer[timer_number].count <= 0)                                        \
@@ -134,9 +129,12 @@
       {                                                                       \
         timer[timer_number + 1].count--;                                      \
         io_registers[REG_TM0D + (timer_number + 1) * 2] =                     \
-        0xFFFF   - (timer[timer_number + 1].count);                          \
+         0xFFFF   - (timer[timer_number + 1].count);                          \
       }                                                                       \
                                                                               \
+      u32 timer_reload                                                        \
+           = timer[timer_number].reload << timer[timer_number].prescale;      \
+                                                                              \
       if(timer_number < 2)                                                    \
       {                                                                       \
         if(timer[timer_number].direct_sound_channels & 0x01)                  \
@@ -144,22 +142,32 @@
                                                                               \
         if(timer[timer_number].direct_sound_channels & 0x02)                  \
           sound_timer(timer[timer_number].frequency_step, 1);                 \
+                                                                              \
+        /* Êñ∞„Åó„ÅÑ„É™„É≠„Éº„ÉâÂÄ§„ÅØ„ÄÅ„Ç™„Éº„Éê„Éº„Éï„É≠„ÉºÂæå„Ç´„Ç¶„É≥„Çø„ÅÆÂÄ§„Å´ÈÅ©Áî®„Åï„Çå„Çã„ÄÇ*/   \
+        /* „É™„É≠„Éº„ÉâÂÄ§„Å®„Ç´„Ç¶„É≥„Çø„ÉºÂÄ§„Å´„Åö„Çå„ÅåÁîü„Åò„Çã„Åå„Å©„Å°„Çâ„Çí‰Ωø„Åà„Å∞„ÅÑ„ÅÑ  */     \
+        /* „ÅÆ„Å†„Çç„ÅÜ„ÅãÔºü */                                                    \
+        if(timer[timer_number].reload_update)                                 \
+        {                                                                     \
+          sound_update_frequency_step(timer_number);                          \
+          timer[timer_number].reload_update = 0;                              \
+        }                                                                     \
       }                                                                       \
                                                                               \
-      timer[timer_number].count +=                                            \
-       (timer[timer_number].reload << timer[timer_number].prescale);          \
+      timer[timer_number].count += timer_reload;                              \
+                                                                              \
       io_registers[REG_TM##timer_number##D] =                                 \
-       0xFFFF - (timer[timer_number].count >> timer[timer_number].prescale); \
+       0xFFFF - (timer[timer_number].count >> timer[timer_number].prescale);  \
     }                                                                         \
   }                                                                           \
 
-// ÉçÅ[ÉJÉãä÷êîÇÃêÈåæ
+// „É≠„Éº„Ç´„É´Èñ¢Êï∞„ÅÆÂÆ£Ë®Ä
 void vblank_interrupt_handler(u32 sub, u32 *parg);
 void init_main();
 int main(int argc, char *argv[]);
 void print_memory_stats(u32 *counter, u32 *region_stats, u8 *stats_str);
 void trigger_ext_event();
-u32 check_power();
+// u32 check_power();
+void loop_sleep();
 int exit_callback(int arg1, int arg2, void *common);
 int power_callback(int unknown, int powerInfo, void *common);
 int CallbackThread(SceSize args, void *argp);
@@ -167,6 +175,11 @@
 
 
 
+void set_cpu_clock(u32 clock)
+{
+  scePowerSetClockFrequency(clock, clock, clock / 2);
+}
+
 
 void init_main()
 {
@@ -199,7 +212,7 @@
   flush_translation_cache_bios();
 }
 
-// SDL.hÇ…ÇÊÇËÅASDL_mainÇ∆ÇµÇƒíËã`Ç≥ÇÍÇÈ
+// SDL.h„Å´„Çà„Çä„ÄÅSDL_main„Å®„Åó„Å¶ÂÆöÁæ©„Åï„Çå„Çã
 int main(int argc, char *argv[])
 {
 //  u32 i;
@@ -210,17 +223,21 @@
   char filename[512];
 
   quit_flag = 0;
-  power_flag = 0;
+//  power_flag = 0;
+  sleep_flag = 0;
   SetupCallbacks();
 
   sceKernelRegisterSubIntrHandler(PSP_VBLANK_INT, 0, vblank_interrupt_handler, NULL);
   sceKernelEnableSubIntr(PSP_VBLANK_INT, 0);
+
+  // „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ„Éï„Ç°„Ç§„É´„ÅÆ„Ç™„Éº„Éó„É≥
   dbg_file = fopen(DBG_FILE_NAME, "awb");
 
   // Copy the directory path of the executable into main_path
   getcwd(main_path, 512);
 
   sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_LANGUAGE, &lang_num);
+  sceUtilityGetSystemParamInt(PSP_SYSTEMPARAM_ID_INT_DATE_FORMAT,&date_format);
 
   if (load_dircfg("settings/dir.cfg") != 0)
   {
@@ -247,6 +264,13 @@
     error_msg("font init Error!!");
     quit();
   }
+/* Ëµ∑Âãï„Åß„Åç„Å™„ÅÑ„ÅÆ„Åß‰∏ÄÊôÇÂâäÈô§
+  // adhocÁî®„É¢„Ç∏„É•„Éº„É´„ÅÆ„É≠„Éº„Éâ
+  if(pspSdkLoadAdhocModules() != 0)
+  {
+    error_msg("not use wlan!!");
+  } */
+//  u32 test = adhocInit("test");
 
   init_gamepak_buffer();
 
@@ -254,7 +278,7 @@
 
   gamepak_filename[0] = 0;
 
-  delay_us(1500000);
+//  delay_us(1500000);
 
   init_main();
   init_sound();
@@ -264,7 +288,9 @@
 
   video_resolution_large();
 
-  if(load_bios("gba_bios.bin") == -1)
+  u32 bios_ret = load_bios("gba_bios.bin");
+
+  if(bios_ret == -1) // Ë™≠Ëæº„ÇÅ„Å™„ÅÑÂ†¥Âêà
   {
     print_string(msg[MSG_ERR_BIOS_1], 0xFFFF, 0x0000, 0, 0);
     print_string(msg[MSG_ERR_BIOS_2], 0xFFFF, 0x0000, 0, 60);
@@ -272,7 +298,7 @@
     quit();
   }
 
-  if(load_bios("gba_bios.bin") == -2)
+  if(bios_ret == -2) // MD5„ÅåÈÅï„ÅÜÂ†¥Âêà
   {
     print_string(msg[MSG_ERR_BIOS_MD5], 0xFFFF, 0x0000, 0, 0);
     delay_us(5000000);
@@ -291,10 +317,11 @@
 
     init_cpu();
     init_memory();
+    reset_sound();
   }
   else
   {
-    if(load_file(file_ext, load_filename, default_rom_dir) == -1)
+    if(load_file(file_ext, load_filename, DEFAULT_ROM_DIR) == -1)
     {
       menu(copy_screen());
     }
@@ -317,6 +344,9 @@
   }
 
   last_frame = 0;
+  /* Ëµ∑ÂãïÊôÇ„ÅÆ„Éï„Ç°„Ç§„É´„É™„Çπ„Éà„Åã„Çârom„Çí„É≠„Éº„Éâ„Åó„ÅüÂ†¥Âêà„ÄÅ„É°„Éã„É•„ÉºÁµÇ‰∫ÜÊôÇ„ÅÆ */
+  /* „ÇØ„É≠„ÉÉ„ÇØÂ§âÊõ¥„ÅåÈÅ©Áî®„Åï„Çå„Å™„ÅÑ„ÅÆ„Åß„ÄÅ„Åì„Åì„Åß„ÇØ„É≠„ÉÉ„ÇØÂ§âÊõ¥„ÄÇ */
+  set_cpu_clock(game_config_clock_speed);
 
   // We'll never actually return from here.
 
@@ -370,7 +400,7 @@
   no_alpha = 0;
   synchronize_flag = 0;
 
-  get_savestate_filename_noshot(savestate_slot, current_savestate_filename);
+  get_savestate_filename_noshot(SAVESTATE_SLOT, current_savestate_filename);
   load_state(current_savestate_filename);
 
   switch(event_number)
@@ -446,6 +476,7 @@
   event_number++;
 }
 
+/*
 u32 check_power()
   {
     if (power_flag == 0) return 0;
@@ -457,6 +488,46 @@
     FILE_OPEN(gamepak_file_large, gamepak_filename_raw, READ);
     return ret_val;
   }
+*/
+/* „Çπ„É™„Éº„ÉóÊôÇ„Å´„Éï„Ç°„Ç§„É´„ÇíÈñâ„Åò„Å¶„ÄÅÂæ©Â∏∞ÂæåÈñã„ÅçÁõ¥„Åô„ÄÇ */
+/* ÂÜç„Å≥Èñã„Åë„Çã„Çà„ÅÜ„Å´„Å™„Çã„Åæ„Åß„Å´„ÅØ„ÄÅ„Çø„Ç§„Éü„É≥„Ç∞„Å´„Çà„Å£„Å¶„Å∞„Çâ„Å§„Åç„Åå„ÅÇ„Çã„ÄÇ*/
+
+void loop_sleep()
+{
+  SDL_PauseAudio(1);
+
+  if(FILE_CHECK_VALID(gamepak_file_large))
+  {
+    FILE_CLOSE(gamepak_file_large);
+
+    while(sleep_flag)
+      delay_us(500000);
+
+    u8 i;
+    for(i = 0; i < 5; i++)
+    {
+      FILE_OPEN(gamepak_file_large, gamepak_filename_raw, READ);
+
+      if(gamepak_file_large < 0)
+        delay_us(500000);
+      else
+        goto success_open_gamepak;
+    }
+
+    printf("Failed to load gemepak.\n");
+    delay_us(3000000);
+    quit_flag = 1;
+
+    success_open_gamepak:;
+  }
+  else
+  {
+    while(sleep_flag)
+      delay_us(500000);
+  }
+
+  SDL_PauseAudio(0);
+}
 
 u32 update_gba()
 {
@@ -549,12 +620,15 @@
           dispstat &= ~0x01;
 //          frame_ticks++;
 
+          if(sleep_flag)
+            loop_sleep();
+
           if (update_input())
             continue;
-
+/*
           if (check_power())
             continue;
-
+*/
           if (quit_flag == 1)
             quit();
 
@@ -753,7 +827,7 @@
 
   fclose(dbg_file);
 
-  scePowerSetClockFrequency(222, 222, 111);
+  set_cpu_clock(222);
   sceKernelExitGame();
 }
 
@@ -819,7 +893,15 @@
 
 int power_callback(int unknown, int powerInfo, void *common)
 {
-  if (powerInfo & PSP_POWER_CB_SUSPENDING) power_flag = 1;
+  if(powerInfo & PSP_POWER_CB_SUSPENDING)
+  {
+    sleep_flag = 1;
+  }
+  else
+  if(powerInfo & PSP_POWER_CB_RESUME_COMPLETE)
+  {
+    sleep_flag = 0;
+  }
   return 0;
 }
 
@@ -827,11 +909,11 @@
 {
   int cbid, power_callback_id;
 
-  // èIóπé¸ÇËÇÃÉRÅ[ÉãÉoÉbÉN 
+  // ÁµÇ‰∫ÜÂë®„Çä„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ 
   cbid = sceKernelCreateCallback("Exit Callback", exit_callback, NULL);
   sceKernelRegisterExitCallback(cbid);
 
-  // ìdåπé¸ÇËÇÃÉRÅ[ÉãÉoÉbÉN 
+  // ÈõªÊ∫êÂë®„Çä„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ 
   power_callback_id = sceKernelCreateCallback("Power Callback", power_callback, NULL); 
   scePowerRegisterCallback(0, power_callback_id);
 
diff -ru 30_orig/main.h 30_new/main.h
--- 30_orig/main.h	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/main.h	2007-08-06 23:46:36.000000000 +0900
@@ -46,6 +46,7 @@
 {
   s32 count;
   u32 reload;
+  u8 reload_update;
   u32 prescale;
   u32 stop_cpu_ticks;
   FIXED16_16 frequency_step;
@@ -93,6 +94,9 @@
 extern u32 num_skipped_frames;
 extern u64 frame_count_initial_timestamp;
 
+extern int date_format;
+void set_cpu_clock(u32 clock);
+
 u32 update_gba();
 void reset_gba();
 void synchronize();
@@ -110,12 +114,7 @@
 
 #define count_timer(timer_number)                                             \
   timer[timer_number].reload = 0x10000 - value;                               \
-  if(timer_number < 2)                                                        \
-  {                                                                           \
-    u32 timer_reload =                                                        \
-     timer[timer_number].reload << timer[timer_number].prescale;              \
-    sound_update_frequency_step(timer_number);                                \
-  }                                                                           \
+  timer[timer_number].reload_update = 1                                       \
 
 #define adjust_sound_buffer(timer_number, channel)                            \
   if(timer[timer_number].direct_sound_channels & (0x01 << channel))           \
@@ -154,7 +153,7 @@
       {                                                                       \
         u32 buffer_adjust =                                                   \
          (u32)(((float)(cpu_ticks - timer[timer_number].stop_cpu_ticks) *     \
-         SOUND_FREQUENCY) / 16777216.0) * 2;                                  \
+         sound_frequency) / 16777216.0) * 2;                                  \
                                                                               \
         sound_update_frequency_step(timer_number);                            \
         adjust_sound_buffer(timer_number, 0);                                 \
diff -ru 30_orig/memory.c 30_new/memory.c
--- 30_orig/memory.c	2007-08-16 14:57:05.684000000 +0900
+++ 30_new/memory.c	2007-08-06 01:50:58.000000000 +0900
@@ -20,6 +20,11 @@
 
 #include "common.h"
 
+#define SAVESTATE_SIZE 506951
+#define SAVESTATE_SIZE_OLD 506947
+u8 savestate_write_buffer[SAVESTATE_SIZE];
+u8 *write_mem_ptr;
+
 typedef enum
 {
   FLASH_DEVICE_MACRONIX_64KB   = 0x1C,
@@ -38,7 +43,7 @@
 } FLASH_MANUFACTURER_ID_TYPE;
 
 
-// ä÷êîêÈåæ
+// Èñ¢Êï∞ÂÆ£Ë®Ä
 
 void memory_write_mem_savestate(FILE_TAG_TYPE savestate_file);
 void memory_read_savestate(FILE_TAG_TYPE savestate_file);
@@ -1905,8 +1910,8 @@
   char backup_path[1024];
   FILE_ID backup_file;
 
-  if (*default_save_dir != (char)NULL) {
-    sprintf(backup_path, "%s/%s", default_save_dir, name);
+  if (*DEFAULT_SAVE_DIR != (char)NULL) {
+    sprintf(backup_path, "%s/%s", DEFAULT_SAVE_DIR, name);
   }
   else
   {
@@ -1969,8 +1974,8 @@
 
   if(backup_type != BACKUP_NONE)
   {
-    if (*default_save_dir != (char)NULL) {
-      sprintf(backup_path, "%s/%s", default_save_dir, name);
+    if (*DEFAULT_SAVE_DIR != (char)NULL) {
+      sprintf(backup_path, "%s/%s", DEFAULT_SAVE_DIR, name);
     }
     else
     {
@@ -2274,6 +2279,9 @@
   return -1;
 }
 
+
+// BIOS„ÅÆ„É≠„Éº„Éâ
+// Ëøî„ÇäÂÄ§:MD5„Åæ„ÅßÊ≠£Â∏∏ 0 / MD5„ÅåÈÅï„ÅÜ -2 / Ë™≠„ÅøËæº„ÇÅ„Å™„ÅÑ -1
 s32 load_bios(char *name)
 {
   u8 md5[16];
@@ -2283,10 +2291,8 @@
   if(FILE_CHECK_VALID(bios_file))
   {
     FILE_READ(bios_file, bios_rom, 0x4000);
-    // This is a hack to get Zelda working, because emulating
-    // the proper memory read behavior here is much too expensive.
     FILE_CLOSE(bios_file);
-    // BIOSÉtÉ@ÉCÉãÇÃMD5ÇìæÇÈ
+    // BIOS„Éï„Ç°„Ç§„É´„ÅÆMD5„ÇíÂæó„Çã
     sceKernelUtilsMd5Digest(bios_rom, 0x4000, md5);
     if (memcmp(md5,gba_md5,16) == 0)
       return 0;
@@ -3222,8 +3228,8 @@
   char savestate_path[1024];
   FILE_ID savestate_file;
 
-  if (*default_save_dir != (char)NULL) {
-    sprintf(savestate_path, "%s/%s", default_save_dir, savestate_filename);
+  if (*DEFAULT_SAVE_DIR != (char)NULL) {
+    sprintf(savestate_path, "%s/%s", DEFAULT_SAVE_DIR, savestate_filename);
   }
   else
   {
@@ -3237,7 +3243,11 @@
     u32 i;
     u32 current_color;
 
-    FILE_SEEK(savestate_file, (240 * 160 * 2) + sizeof(time_t), SEEK_SET);
+    u32 file_size = file_length(savestate_path, (s32)NULL);
+    if (file_size == SAVESTATE_SIZE)
+      FILE_SEEK(savestate_file, (240 * 160 * 2) + sizeof(u64), SEEK_SET);
+    else
+      FILE_SEEK(savestate_file, (240 * 160 * 2) + sizeof(u32), SEEK_SET);
 
     strcpy(current_gamepak_filename, gamepak_filename);
 
@@ -3250,6 +3260,8 @@
 
     oam_update = 1;
     gbc_sound_update = 1;
+ 
+    // TODO:ÈÅï„ÅÜROM„ÅÆstatesave„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ„Å®„Éï„É™„Éº„Ç∫„Åô„Çã
     if(strcmp(current_gamepak_filename, gamepak_filename))
     {
       // We'll let it slide if the filenames of the savestate and
@@ -3290,16 +3302,13 @@
   }
 }
 
-u8 savestate_write_buffer[506947];
-u8 *write_mem_ptr;
-
 void save_state(char *savestate_filename, u16 *screen_capture)
 {
   char savestate_path[1024];
   FILE_ID savestate_file;
 
-  if (*default_save_dir != (char)NULL) {
-    sprintf(savestate_path, "%s/%s", default_save_dir, savestate_filename);
+  if (*DEFAULT_SAVE_DIR != (char)NULL) {
+    sprintf(savestate_path, "%s/%s", DEFAULT_SAVE_DIR, savestate_filename);
   }
   else
   {
@@ -3310,14 +3319,15 @@
   FILE_OPEN(savestate_file, savestate_path, WRITE);
   if(FILE_CHECK_VALID(savestate_file))
   {
-    time_t current_time;
+    u64 current_time;
+    pspTime current_time_fix; // timeÈñ¢Êï∞„ÅåÂπ¥ÊúàÊó•„ÇíËøî„Åï„Å™„ÅÑ„ÅÆ„ÅßË™øÊï¥Áî®
     FILE_WRITE_MEM(savestate_file, screen_capture, 240 * 160 * 2);
 
-    time(&current_time);
+    sceRtcGetCurrentClock(&current_time_fix, 0);
+    sceRtcGetTick(&current_time_fix, &current_time);
     FILE_WRITE_MEM_VARIABLE(savestate_file, current_time);
 
     savestate_block(write_mem);
-
     FILE_WRITE(savestate_file, savestate_write_buffer,
      sizeof(savestate_write_buffer));
     FILE_CLOSE(savestate_file);
diff -ru 30_orig/memory.h 30_new/memory.h
--- 30_orig/memory.h	2007-08-16 14:57:05.700000000 +0900
+++ 30_new/memory.h	2007-08-06 23:46:28.000000000 +0900
@@ -140,7 +140,7 @@
   REG_HALTCNT = 0x180
 } HARDWARE_REGISTER;
 
-// ÉOÉçÅ[ÉoÉãïœêîêÈåæ
+// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ÂÆ£Ë®Ä
 
 extern char gamepak_title[13];
 extern char gamepak_code[5];
@@ -172,7 +172,7 @@
 
 extern FILE_TAG_TYPE gamepak_file_large;
 
-// ä÷êîêÈåæ
+// Èñ¢Êï∞ÂÆ£Ë®Ä
 
 extern u8 read_memory8(u32 address);
 extern u32 read_memory16(u32 address);
@@ -185,7 +185,7 @@
 extern CPU_ALERT_TYPE dma_transfer(DMA_TRANSFER_TYPE *dma);
 extern u8 *memory_region(u32 address, u32 *memory_limit);
 extern s32 load_bios(char *name);
-extern u32 load_gamepak(char *name);
+extern s32 load_gamepak(char *name);
 extern u8 *load_gamepak_page(u32 physical_index);
 extern u32 load_backup(char *name);
 extern void init_memory();
diff -ru 30_orig/mips_emit.h 30_new/mips_emit.h
--- 30_orig/mips_emit.h	2007-08-16 14:57:05.853000000 +0900
+++ 30_new/mips_emit.h	2007-08-06 01:50:58.000000000 +0900
@@ -2356,8 +2356,6 @@
   }                                                                           \
 }
 
-
-
 #define thumb_conditional_branch(condition)                                   \
 {                                                                             \
   condition_check_type condition_check;                                       \
@@ -2528,27 +2526,27 @@
     /* CpuFastSet */                                                          \
     if(swi_number == 0x0C)                                                    \
     {                                                                         \
-      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                               \
-      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                               \
-      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                               \
+      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                          \
+      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                          \
+      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                          \
       generate_function_call(bios_cpufastset);                                \
     }                                                                         \
                                                                               \
     /* BgAffineSet */                                                         \
     if(swi_number == 0x0E)                                                    \
     {                                                                         \
-      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                               \
-      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                               \
-      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                               \
+      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                          \
+      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                          \
+      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                          \
       generate_function_call(bios_bgaffineset);                               \
     }                                                                         \
                                                                               \
     /* ObjAffineSet */                                                        \
     if(swi_number == 0x0F)                                                    \
     {                                                                         \
-      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                               \
-      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                               \
-      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                               \
+      mips_emit_addu(mips_reg_a0, reg_r0, reg_zero);                          \
+      mips_emit_addu(mips_reg_a1, reg_r1, reg_zero);                          \
+      mips_emit_addu(mips_reg_a2, reg_r2, reg_zero);                          \
       mips_emit_addu(mips_reg_a3, reg_r3, reg_zero);                          \
       generate_function_call(bios_objaffineset);                              \
     }                                                                         \
diff -ru 30_orig/mips_stub.S 30_new/mips_stub.S
--- 30_orig/mips_stub.S	2007-08-16 14:57:05.741000000 +0900
+++ 30_new/mips_stub.S	2007-08-06 01:50:58.000000000 +0900
@@ -3403,6 +3403,8 @@
   jr $ra                          # return
   nop
 
+.align 4
+
 memory_map_read:
   .space 0x8000
 
@@ -3411,6 +3413,3 @@
 
 memory_map_write:
   .space 0x8000
-
-reg_temp:
-  .space 0x100
Only in 30_new/: psp
diff -ru 30_orig/readme_kai_jp.txt 30_new/readme_kai_jp.txt
--- 30_orig/readme_kai_jp.txt	2007-08-16 14:57:05.666000000 +0900
+++ 30_new/readme_kai_jp.txt	2007-08-05 23:04:12.000000000 +0900
@@ -1,262 +1,271 @@
 -- gameplaySP  Gameboy Advance emulator for Playstation Portable --
 
 -- Release log --
+-UnOfficial gpSP kai 3.1 test 05 svn rev.**
+	„Ç´„Éº„Éç„É´„É¢„Éº„Éâ„ÅßÂãï‰Ωú„Åô„Çã„Çà„ÅÜ„Å´Â§âÊõ¥
+		„Ç´„Éº„Éç„É´„É¢„Éº„Éâ„Å´„Åô„Çã„Åü„ÇÅ„ÄÅÊîπÂ§âSDL„Çí‰ΩøÁî®
+	statesave„ÅÆÊó•‰ªòË°®Á§∫„Çí‰øÆÊ≠£
+		pspsdk„ÅÆtime()Èñ¢Êï∞„ÅåÊôÇÂàª„Åó„ÅãËøî„Åï„Å™„ÅÑ„Åü„ÇÅ
+	‰∏äË®ò„Å´‰º¥„ÅÑ„ÄÅsatesave„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫„Çí506947 -> 506951„Å´Â§âÊõ¥
+		Âè§„ÅÑ„Éï„Ç°„Ç§„É´„ÇÇË™≠Ëæº„ÅøÊôÇ„Å´Ëá™ÂãïÂà§Âà•„Åó„Å¶Ë™≠„ÅøËæº„Åø„Åæ„Åô
+		‰øùÂ≠òÊôÇ„Å´Êñ∞„Åó„ÅÑÂΩ¢Âºè„Åß‰øùÂ≠ò„Åï„Çå„Åæ„Åô
+
 -UnOfficial gpSP kai 3.1 test 04 svn rev.65
-	ÉvÉ`ÉmÉCÉYÇÃí·å∏
-	É`Å[ÉgêîÇ30å¬Ç…ïœçX
-	É`Å[ÉgÉÅÉjÉÖÅ[ÇÃÉyÅ[ÉWêÿë÷Ç…ëŒâû
-	É`Å[ÉgÇ™óLå¯Ç…Ç»ÇÁÇ»Ç©Ç¡ÇΩÇÃÇèCê≥
-	game cfgÉtÉ@ÉCÉãÇÉ`Å[ÉgÇÃëùâ¡Ç…ëŒâû
-		êÃÇÃgame cfgÉtÉ@ÉCÉãÇÕçÌèúÇµÇƒâ∫Ç≥Ç¢ÅAêVÇµÇ¢Ç‡ÇÃÇÕ136byteÇ…Ç»Ç¡ÇƒÇ¢Ç‹Ç∑
+	„Éó„ÉÅ„Éé„Ç§„Ç∫„ÅÆ‰ΩéÊ∏õ
+	„ÉÅ„Éº„ÉàÊï∞„Çí30ÂÄã„Å´Â§âÊõ¥
+	„ÉÅ„Éº„Éà„É°„Éã„É•„Éº„ÅÆ„Éö„Éº„Ç∏ÂàáÊõø„Å´ÂØæÂøú
+	„ÉÅ„Éº„Éà„ÅåÊúâÂäπ„Å´„Å™„Çâ„Å™„Åã„Å£„Åü„ÅÆ„Çí‰øÆÊ≠£
+	game cfg„Éï„Ç°„Ç§„É´„Çí„ÉÅ„Éº„Éà„ÅÆÂ¢óÂä†„Å´ÂØæÂøú
+		Êòî„ÅÆgame cfg„Éï„Ç°„Ç§„É´„ÅØÂâäÈô§„Åó„Å¶‰∏ã„Åï„ÅÑ„ÄÅÊñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÅØ136byte„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô
 
 -UnOfficial gpSP kai 3.1 test 03 svn rev.45
-	ÉXÉäÅ[ÉuéûÇÃÉtÉäÅ[ÉYÇ…ëŒâû
-		ÉXÉäÅ[ÉuïúãAå„ÇÕÉÅÉjÉÖÅ[âÊñ Ç…Ç»ÇËÇ‹Ç∑
+	„Çπ„É™„Éº„ÉñÊôÇ„ÅÆ„Éï„É™„Éº„Ç∫„Å´ÂØæÂøú
+		„Çπ„É™„Éº„ÉñÂæ©Â∏∞Âæå„ÅØ„É°„Éã„É•„ÉºÁîªÈù¢„Å´„Å™„Çä„Åæ„Åô
 
 -UnOfficial gpSP kai 3.1 test 02
-	ÇøÇÂÇ±Ç¡Ç∆ç≈ìKâª
-	ÉTÉEÉìÉhÉoÉbÉtÉ@ÇÃê›íËÇ2048Å`Ç…ñﬂÇµÇΩ
-	ÉTÉEÉìÉhÇÃíËä˙ìIÇ»ÉvÉ`ÉmÉCÉYÇÃëŒâû
+	„Å°„Çá„Åì„Å£„Å®ÊúÄÈÅ©Âåñ
+	„Çµ„Ç¶„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„ÅÆË®≠ÂÆö„Çí2048ÔΩû„Å´Êàª„Åó„Åü
+	„Çµ„Ç¶„É≥„Éâ„ÅÆÂÆöÊúüÁöÑ„Å™„Éó„ÉÅ„Éé„Ç§„Ç∫„ÅÆÂØæÂøú
 
 -UnOfficial gpSP kai 3.1 test 01
-	ïsê≥Ç»BIOSÉRÅ[ÉãÇñ≥éãÇ∑ÇÈÇÊÇ§Ç…ÇµÇΩ 
-		àÍïîÇÃì¡éÍÇ»ROMÇ…ëŒâû
-	ÉTÉEÉìÉhé¸ÇËÇè≠Çµí≤êÆ
-	ARM/THUMBÇÃSBC/RSCñΩóﬂÇçƒí≤êÆ
-		ÉhÉìÉLÅ[ÉRÉìÉO3ÇÃâπÇ™èoÇƒÇ¢Ç»Ç©Ç¡ÇΩÇÃÇ…ëŒâû 
-	I/OÉåÉWÉXÉ^ÇÃ0x410Å`0x800Ç…âºëŒâû 
-		àÍïîÇÃì¡éÍÇ»ROMÇ…ëŒâû
+	‰∏çÊ≠£„Å™BIOS„Ç≥„Éº„É´„ÇíÁÑ°Ë¶ñ„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü 
+		‰∏ÄÈÉ®„ÅÆÁâπÊÆä„Å™ROM„Å´ÂØæÂøú
+	„Çµ„Ç¶„É≥„ÉâÂë®„Çä„ÇíÂ∞ë„ÅóË™øÊï¥
+	ARM/THUMB„ÅÆSBC/RSCÂëΩ‰ª§„ÇíÂÜçË™øÊï¥
+		„Éâ„É≥„Ç≠„Éº„Ç≥„É≥„Ç∞3„ÅÆÈü≥„ÅåÂá∫„Å¶„ÅÑ„Å™„Åã„Å£„Åü„ÅÆ„Å´ÂØæÂøú 
+	I/O„É¨„Ç∏„Çπ„Çø„ÅÆ0x410ÔΩû0x800„Å´‰ªÆÂØæÂøú 
+		‰∏ÄÈÉ®„ÅÆÁâπÊÆä„Å™ROM„Å´ÂØæÂøú
 
 -UnOfficial gpSP kai 3.0
-	É\Å[ÉXÇè≠ÇµêÆóù
+	„ÇΩ„Éº„Çπ„ÇíÂ∞ë„ÅóÊï¥ÁêÜ
 
 -UnOfficial gpSP kai ml 3.00 test 10
-	BIOSÇÃê›íËÇÉ~ÉXÇµÇƒÇ¢ÇΩÇÃÇèCê≥ 
-	FPSï\é¶éûÇ…ó]åvÇ»I/OÇï\é¶ÇµÇƒÇ¢ÇΩÇÃÇèCê≥
+	BIOS„ÅÆË®≠ÂÆö„Çí„Éü„Çπ„Åó„Å¶„ÅÑ„Åü„ÅÆ„Çí‰øÆÊ≠£ 
+	FPSË°®Á§∫ÊôÇ„Å´‰ΩôË®à„Å™I/O„ÇíË°®Á§∫„Åó„Å¶„ÅÑ„Åü„ÅÆ„Çí‰øÆÊ≠£
 
 -UnOfficial gpSP kai ml 3.00 test 9
-	ÉoÉbÉNÉAÉbÉvÉZÅ[ÉuÇÃïsãÔçáèCê≥ 
-	ÉXÉNÉäÅ[ÉìÉVÉáÉbÉgÇBMPÇ≈é¿ëï 
-		PNGÉâÉCÉuÉâÉäÇÕïsïKóvÇ…Ç»ÇËÇ‹ÇµÇΩ
-	É^ÉCÉ~ÉìÉOÇ…ÇÊÇ¡ÇƒÇÕÅAÉZÅ[ÉuÉfÅ[É^Ç™âÛÇÍÇÈÉoÉOÇèCê≥ 
-	BIOS HALTÇâºé¿ëï 
-	BIOSÉRÅ[Éãé¸ÇËÇè´óàópÇ…í≤êÆ
+	„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çª„Éº„Éñ„ÅÆ‰∏çÂÖ∑Âêà‰øÆÊ≠£ 
+	„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíBMP„ÅßÂÆüË£Ö 
+		PNG„É©„Ç§„Éñ„É©„É™„ÅØ‰∏çÂøÖË¶Å„Å´„Å™„Çä„Åæ„Åó„Åü
+	„Çø„Ç§„Éü„É≥„Ç∞„Å´„Çà„Å£„Å¶„ÅØ„ÄÅ„Çª„Éº„Éñ„Éá„Éº„Çø„ÅåÂ£ä„Çå„Çã„Éê„Ç∞„Çí‰øÆÊ≠£ 
+	BIOS HALT„Çí‰ªÆÂÆüË£Ö 
+	BIOS„Ç≥„Éº„É´Âë®„Çä„ÇíÂ∞ÜÊù•Áî®„Å´Ë™øÊï¥
 
 -UnOfficial gpSP kai ml 3.00 test 8
-	FF6AÇÃëŒâû
-		thumb sbcñΩóﬂÇÃc flagÇÃÉoÉOÇèCê≥
-	ÉXÉNÉäÅ[ÉìÉVÉáÉbÉgÇ≈ÉnÉìÉOÉAÉbÉvÇ∑ÇÈÅBtest 9Ç…ÇƒèCê≥ó\íË
-	romÇÉçÅ[ÉhÇµÇ»Ç¢Ç≈èIóπÇ∑ÇÈÇ∆ÅAàÍèuÉuÉãÅ[ÉXÉNÉäÅ[ÉìÇ…Ç»ÇÈÇÃÇèCê≥
-	Kingdom Hearts - Chain of MemoriesÇÃÉÄÅ[ÉrÅ[Ç™ÉtÉäÅ[ÉYÇµÇ»Ç≠Ç»Ç¡ÇΩ(âÊëúÇÕÉ{ÉçÉ{ÉçÇ≈Ç∑Ç™)
+	FF6A„ÅÆÂØæÂøú
+		thumb sbcÂëΩ‰ª§„ÅÆc flag„ÅÆ„Éê„Ç∞„Çí‰øÆÊ≠£
+	„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Åß„Éè„É≥„Ç∞„Ç¢„ÉÉ„Éó„Åô„Çã„ÄÇtest 9„Å´„Å¶‰øÆÊ≠£‰∫àÂÆö
+	rom„Çí„É≠„Éº„Éâ„Åó„Å™„ÅÑ„ÅßÁµÇ‰∫Ü„Åô„Çã„Å®„ÄÅ‰∏ÄÁû¨„Éñ„É´„Éº„Çπ„ÇØ„É™„Éº„É≥„Å´„Å™„Çã„ÅÆ„Çí‰øÆÊ≠£
+	Kingdom Hearts - Chain of Memories„ÅÆ„É†„Éº„Éì„Éº„Åå„Éï„É™„Éº„Ç∫„Åó„Å™„Åè„Å™„Å£„Åü(ÁîªÂÉè„ÅØ„Éú„É≠„Éú„É≠„Åß„Åô„Åå)
 
 -UnOfficial gpSP kai ml 3.00 test 7
-	BIOSÇÃèàóùÇdivArmà»äOÇÕå≥Ç…ñﬂÇµÇΩ
-		ïsãÔçáÇ™ëΩÇ©Ç¡ÇΩÇΩÇﬂ(ë¨ìxñ Ç≈éÃÇƒÇ™ÇΩÇ¢Ç‡ÇÃÇ™Ç†ÇÈÇÃÇ≈ÅAè´óàÇÕâΩÇ∆Ç©ÇµÇΩÇ¢)
-	écÇËÇÃÉÅÉÇÉäÇ∆ÅAROMópÉoÉbÉtÉ@ÉTÉCÉYÇï\é¶Ç∑ÇÈÇÊÇ§Ç…ÇµÇΩ
+	BIOS„ÅÆÂá¶ÁêÜ„ÇídivArm‰ª•Â§ñ„ÅØÂÖÉ„Å´Êàª„Åó„Åü
+		‰∏çÂÖ∑Âêà„ÅåÂ§ö„Åã„Å£„Åü„Åü„ÇÅ(ÈÄüÂ∫¶Èù¢„ÅßÊç®„Å¶„Åå„Åü„ÅÑ„ÇÇ„ÅÆ„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅÂ∞ÜÊù•„ÅØ‰Ωï„Å®„Åã„Åó„Åü„ÅÑ)
+	ÊÆã„Çä„ÅÆ„É°„É¢„É™„Å®„ÄÅROMÁî®„Éê„ÉÉ„Éï„Ç°„Çµ„Ç§„Ç∫„ÇíË°®Á§∫„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü
 
 -UnOfficial gpSP kai ml 3.00 test 6
-	ÉTÉEÉìÉhÇÃÉYÉåÇèCê≥ 
-	ÉÅÉgÉçÉCÉhÉtÉÖÅ[ÉWÉáÉìÇÃÉZÅ[ÉuÉfÅ[É^ëIëâÊñ ÇÃÉXÉeÅ[É^ÉXàŸèÌÇèCê≥ 
-	BIOSì‡ÇÃdivArm,sqrt,cpuset,cpufastsetÇÉlÉCÉeÉBÉuÇ≈é¿ëï 
-		è´óàBIOSñ≥ÇµÇ≈ìÆÇ©ÇπÇÈÇΩÇﬂÇÃÉeÉXÉg
-		ÉLÉìÉOÉ_ÉÄÉnÅ[ÉcÇ™ãNìÆÇ≈Ç´Ç»Ç≠Ç»Ç¡ÇƒÇ‹Ç∑
-	MakefileÇÃèCê≥
+	„Çµ„Ç¶„É≥„Éâ„ÅÆ„Ç∫„É¨„Çí‰øÆÊ≠£ 
+	„É°„Éà„É≠„Ç§„Éâ„Éï„É•„Éº„Ç∏„Éß„É≥„ÅÆ„Çª„Éº„Éñ„Éá„Éº„ÇøÈÅ∏ÊäûÁîªÈù¢„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπÁï∞Â∏∏„Çí‰øÆÊ≠£ 
+	BIOSÂÜÖ„ÅÆdivArm,sqrt,cpuset,cpufastset„Çí„Éç„Ç§„ÉÜ„Ç£„Éñ„ÅßÂÆüË£Ö 
+		Â∞ÜÊù•BIOSÁÑ°„Åó„ÅßÂãï„Åã„Åõ„Çã„Åü„ÇÅ„ÅÆ„ÉÜ„Çπ„Éà
+		„Ç≠„É≥„Ç∞„ÉÄ„É†„Éè„Éº„ÉÑ„ÅåËµ∑Âãï„Åß„Åç„Å™„Åè„Å™„Å£„Å¶„Åæ„Åô
+	Makefile„ÅÆ‰øÆÊ≠£
 
 -UnOfficial gpSP kai ml 3.00 test 5
-	É^ÉCÉ}ÇÃÉJÉEÉìÉ^èàóùÇÇ≥ÇÁÇ…èCê≥ 
-		ÉÜÉOÉhÉâÉÜÉjÉIÉìÇÃïsãÔçáèCê≥
-	MakefileÇÃèCê≥ 
-	Ç±ÇÃìÒì_ÇÕì¡éÍÇ»èÛãµÇ≈ÇµÇ©î≠ê∂ÇµÇ»Ç¢Ç∆évÇÌÇÍÇÈÇÃÇ≈ÅAÇ∆ÇËÇ†Ç¶Ç∏ÇªÇÃÇ‹Ç‹ï˙íu
-	ÉTÉEÉìÉhé¸ÇËÇÇŸÇÒÇÃè≠Çµç≈ìKâª 
-	ç°âÒÇ©ÇÁver1.0Ç∆ver1.5ÇìØç´
+	„Çø„Ç§„Éû„ÅÆ„Ç´„Ç¶„É≥„ÇøÂá¶ÁêÜ„Çí„Åï„Çâ„Å´‰øÆÊ≠£ 
+		„É¶„Ç∞„Éâ„É©„É¶„Éã„Ç™„É≥„ÅÆ‰∏çÂÖ∑Âêà‰øÆÊ≠£
+	Makefile„ÅÆ‰øÆÊ≠£ 
+	„Åì„ÅÆ‰∫åÁÇπ„ÅØÁâπÊÆä„Å™Áä∂Ê≥Å„Åß„Åó„ÅãÁô∫Áîü„Åó„Å™„ÅÑ„Å®ÊÄù„Çè„Çå„Çã„ÅÆ„Åß„ÄÅ„Å®„Çä„ÅÇ„Åà„Åö„Åù„ÅÆ„Åæ„ÅæÊîæÁΩÆ
+	„Çµ„Ç¶„É≥„ÉâÂë®„Çä„Çí„Åª„Çì„ÅÆÂ∞ë„ÅóÊúÄÈÅ©Âåñ 
+	‰ªäÂõû„Åã„Çâver1.0„Å®ver1.5„ÇíÂêåÊ¢±
 
 -UnOfficial gpSP kai ml 3.00 test 4
-	RPGÉcÉNÅ[ÉãÉAÉhÉoÉìÉXÇÃâπÇ™Ç®Ç©ÇµÇ≠Ç»ÇÈÉoÉOÇèCê≥
-		É^ÉCÉ}ÇÃÉJÉEÉìÉ^èàóùÇèCê≥
-	ÉTÉEÉìÉhÇ…ÉvÉ`ÉvÉ`Ç∆ÉmÉCÉYÇ™ì¸Ç¡ÇƒÇ¢ÇΩÇÃÇ≈ÅAmips_stub.SÇÃàÍïîÇ0.9Ç…ñﬂÇµÇΩ
+	RPG„ÉÑ„ÇØ„Éº„É´„Ç¢„Éâ„Éê„É≥„Çπ„ÅÆÈü≥„Åå„Åä„Åã„Åó„Åè„Å™„Çã„Éê„Ç∞„Çí‰øÆÊ≠£
+		„Çø„Ç§„Éû„ÅÆ„Ç´„Ç¶„É≥„ÇøÂá¶ÁêÜ„Çí‰øÆÊ≠£
+	„Çµ„Ç¶„É≥„Éâ„Å´„Éó„ÉÅ„Éó„ÉÅ„Å®„Éé„Ç§„Ç∫„ÅåÂÖ•„Å£„Å¶„ÅÑ„Åü„ÅÆ„Åß„ÄÅmips_stub.S„ÅÆ‰∏ÄÈÉ®„Çí0.9„Å´Êàª„Åó„Åü
 
 -UnOfficial gpSP kai ml 3.00 test 3
-	gpSP0.91Ç≈ÇÃïœçXì_ÇÇŸÇ⁄éÊÇËçûÇ›Ç‹ÇµÇΩ 
-		écÇËÇÕÉfÉoÉbÉOä÷åWÇÃé¿ëïÇ∆ÅAarm_stub.S/arm_emit.hÇÇªÇÍÇºÇÍPSPópÇ…à⁄êAÇ∑ÇÈÇ±Ç∆Ç≈Ç∑
-	32MBÇÃROMÇé¿çséûÇ…PSPÇÉXÉäÅ[ÉvÇ≥ÇπÇÈÇ∆ÅAïúãAéûÇ…ÉnÉìÉOÉAÉbÉvÇ∑ÇÈÇÃÇïîï™ìIÇ…èCê≥
-		ÉÅÉjÉÖÅ[Çï\é¶Ç≥ÇπÇΩèÛë‘Ç≈ÉXÉäÅ[ÉvÇ≥ÇπÇÍÇŒÅAÉnÉìÉOÉAÉbÉvÇµÇ»Ç¢ólÇ…ÇµÇ‹ÇµÇΩ
-	ÉTÉEÉìÉhé¸ÇËÇè≠Çµç≈ìKâªÅEçÇê∏ìxâª
-	âÊñ ï\é¶é¸ÇËÇè≠Çµç≈ìKâª
-		è„ãL2ì_Ç…ÇÊÇË2Å`3FPSå¸è„ÇµÇƒÇ¢Ç‹Ç∑
-	0.91ÇÃgame_config.txtÇ…ì˙ñ{ÇÃROMÇí«â¡
+	gpSP0.91„Åß„ÅÆÂ§âÊõ¥ÁÇπ„Çí„Åª„ÅºÂèñ„ÇäËæº„Åø„Åæ„Åó„Åü 
+		ÊÆã„Çä„ÅØ„Éá„Éê„ÉÉ„Ç∞Èñ¢‰øÇ„ÅÆÂÆüË£Ö„Å®„ÄÅarm_stub.S/arm_emit.h„Çí„Åù„Çå„Åû„ÇåPSPÁî®„Å´ÁßªÊ§ç„Åô„Çã„Åì„Å®„Åß„Åô
+	32MB„ÅÆROM„ÇíÂÆüË°åÊôÇ„Å´PSP„Çí„Çπ„É™„Éº„Éó„Åï„Åõ„Çã„Å®„ÄÅÂæ©Â∏∞ÊôÇ„Å´„Éè„É≥„Ç∞„Ç¢„ÉÉ„Éó„Åô„Çã„ÅÆ„ÇíÈÉ®ÂàÜÁöÑ„Å´‰øÆÊ≠£
+		„É°„Éã„É•„Éº„ÇíË°®Á§∫„Åï„Åõ„ÅüÁä∂ÊÖã„Åß„Çπ„É™„Éº„Éó„Åï„Åõ„Çå„Å∞„ÄÅ„Éè„É≥„Ç∞„Ç¢„ÉÉ„Éó„Åó„Å™„ÅÑÊßò„Å´„Åó„Åæ„Åó„Åü
+	„Çµ„Ç¶„É≥„ÉâÂë®„Çä„ÇíÂ∞ë„ÅóÊúÄÈÅ©Âåñ„ÉªÈ´òÁ≤æÂ∫¶Âåñ
+	ÁîªÈù¢Ë°®Á§∫Âë®„Çä„ÇíÂ∞ë„ÅóÊúÄÈÅ©Âåñ
+		‰∏äË®ò2ÁÇπ„Å´„Çà„Çä2ÔΩû3FPSÂêë‰∏ä„Åó„Å¶„ÅÑ„Åæ„Åô
+	0.91„ÅÆgame_config.txt„Å´Êó•Êú¨„ÅÆROM„ÇíËøΩÂä†
 
 -UnOfficial gpSP kai ml 3.00 test 2
-	gpSP0.91Ç≈ÇÃïœçXì_ÇàÍïîéÊÇËçûÇ›Ç‹ÇµÇΩ 
-		FPSÇÃï\é¶(ÉLÅ[ÉRÉìÉtÉBÉOÇ…ÇƒìKìñÇ»ÉLÅ[Ç…äÑìñÇƒÇƒégópÇµÇ‹Ç∑) 
-		VOL UP/DOWNÇÕé¿ëïÇµÇƒÇ¢Ç‹ÇπÇÒ
-	è„ãLÇ…ÇÊÇÈmsgÉtÉ@ÉCÉãÇÃçXêV 
-	HOMEÉ{É^ÉìÇ≈èIóπÇ≈Ç´Ç»Ç©Ç¡ÇΩÇÃÇèCê≥
+	gpSP0.91„Åß„ÅÆÂ§âÊõ¥ÁÇπ„Çí‰∏ÄÈÉ®Âèñ„ÇäËæº„Åø„Åæ„Åó„Åü 
+		FPS„ÅÆË°®Á§∫(„Ç≠„Éº„Ç≥„É≥„Éï„Ç£„Ç∞„Å´„Å¶ÈÅ©ÂΩì„Å™„Ç≠„Éº„Å´Ââ≤ÂΩì„Å¶„Å¶‰ΩøÁî®„Åó„Åæ„Åô) 
+		VOL UP/DOWN„ÅØÂÆüË£Ö„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì
+	‰∏äË®ò„Å´„Çà„Çãmsg„Éï„Ç°„Ç§„É´„ÅÆÊõ¥Êñ∞ 
+	HOME„Éú„Çø„É≥„ÅßÁµÇ‰∫Ü„Åß„Åç„Å™„Åã„Å£„Åü„ÅÆ„Çí‰øÆÊ≠£
 
 -UnOfficial gpSP kai ml 3.00 test 1
-	gpSP0.91Ç≈ÇÃïœçXì_ÇàÍïîéÊÇËçûÇ›Ç‹ÇµÇΩ
-		cpué¸ÇËÇÕëÂïùÇ»ïœçXÇ™ïKóvÇ»ÇΩÇﬂÅAÇ†Ç‹ÇËéÊÇËçûÇÒÇ≈Ç¢Ç‹ÇπÇÒ
-		ç◊Ç©Ç¢èCê≥Ç‡çsÇ¡ÇƒÇ¢Ç‹ÇπÇÒ
-	ÉCÉ^ÉäÉAåÍÇÃÉÅÉbÉZÅ[ÉWÉtÉ@ÉCÉãÇÃí«â¡
-	ÉAÉCÉRÉìâÊëúÇÃí«â¡
+	gpSP0.91„Åß„ÅÆÂ§âÊõ¥ÁÇπ„Çí‰∏ÄÈÉ®Âèñ„ÇäËæº„Åø„Åæ„Åó„Åü
+		cpuÂë®„Çä„ÅØÂ§ßÂπÖ„Å™Â§âÊõ¥„ÅåÂøÖË¶Å„Å™„Åü„ÇÅ„ÄÅ„ÅÇ„Åæ„ÇäÂèñ„ÇäËæº„Çì„Åß„ÅÑ„Åæ„Åõ„Çì
+		Á¥∞„Åã„ÅÑ‰øÆÊ≠£„ÇÇË°å„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì
+	„Ç§„Çø„É™„Ç¢Ë™û„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Éï„Ç°„Ç§„É´„ÅÆËøΩÂä†
+	„Ç¢„Ç§„Ç≥„É≥ÁîªÂÉè„ÅÆËøΩÂä†
 		thanks Luca Lefebre
 
 -UnOfficial gpSP kai ml 2.92
-	É}ÉãÉ`ÉâÉìÉQÅ[ÉWÇ…ëŒâû
-		PSPÇÃåæåÍê›íËÇ≈ëIÇÒÇæåæåÍÇÃÉtÉ@ÉCÉãÇé©ìÆÇ≈égópÇ∑ÇÈ
-	message.cfg/font.cfgÇ*.msg/*.fntÇ…ÉäÉlÅ[ÉÄ
-	dir.cfg/*.msg/*.fntÇsetting/ÇÃâ∫Ç…à⁄ìÆ
-	ì˙ñ{åÍÇµÇ©Ç≈Ç´Ç»Ç¢ÇÃÇ≈ÅAâpåÍ/ì˙ñ{åÍà»äOÇÕÇªÇÍÇºÇÍèëÇ´ä∑Ç¶ÇƒégÇ¡ÇƒÇ≠ÇæÇ≥Ç¢
+	„Éû„É´„ÉÅ„É©„É≥„Ç≤„Éº„Ç∏„Å´ÂØæÂøú
+		PSP„ÅÆË®ÄË™ûË®≠ÂÆö„ÅßÈÅ∏„Çì„Å†Ë®ÄË™û„ÅÆ„Éï„Ç°„Ç§„É´„ÇíËá™Âãï„Åß‰ΩøÁî®„Åô„Çã
+	message.cfg/font.cfg„Çí*.msg/*.fnt„Å´„É™„Éç„Éº„É†
+	dir.cfg/*.msg/*.fnt„Çísetting/„ÅÆ‰∏ã„Å´ÁßªÂãï
+	Êó•Êú¨Ë™û„Åó„Åã„Åß„Åç„Å™„ÅÑ„ÅÆ„Åß„ÄÅËã±Ë™û/Êó•Êú¨Ë™û‰ª•Â§ñ„ÅØ„Åù„Çå„Åû„ÇåÊõ∏„ÅçÊèõ„Åà„Å¶‰Ωø„Å£„Å¶„Åè„Å†„Åï„ÅÑ
 
 -UnOfficial gpSP kai jp 2.91
-	îÒê≥ãKÇÃBIOSÇ≈Ç‡ãNìÆÇ≈Ç´ÇÈÇÊÇ§Ç…ÇµÇΩ
-	message.cfgÇÃí«â¡
+	ÈùûÊ≠£Ë¶è„ÅÆBIOS„Åß„ÇÇËµ∑Âãï„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Åü
+	message.cfg„ÅÆËøΩÂä†
 
 -UnOfficial gpSP kai jp 2.9
-	ÉÅÉjÉÖÅ[Ç≈ÇÃéûåvï\é¶/ÉoÉbÉeÉäÅ[écó ï\é¶Çí«â¡
-	èIóπéûÇ…222MHzÇ…ñﬂÇ∑ólÇ…ÇµÇΩ
-	ÉÅÉjÉÖÅ[Ç©ÇÁÅõÇ‚Å~É{É^ÉìÇ≈ÉQÅ[ÉÄÇ…ñﬂÇÈéûÇ…ÅAÉQÅ[ÉÄì‡Ç≈É{É^ÉìÇîFéØÇ≥ÇπÇ»Ç¢ólÇ…ÇµÇΩ
-		(É{É^ÉìÇï˙ÇµÇΩéûì_Ç≈ñﬂÇËÇ‹Ç∑) 
-	ROMìôÇÃëIëéûÇ…R/LÉ{É^ÉìÇ≈ÇÃ5çsÇ≤Ç∆ÇÃà⁄ìÆÇí«â¡
-	BBSÇ…äÒÇπÇÁÇÍÇΩèÓïÒÇ…ÇÊÇÈÅARTCâÙÇË/mips_stub.SÇÃèCê≥
-	ì˙éûÇÃï\é¶ÉtÉHÅ[É}ÉbÉgÇ…PSPÇÃÉåÉWÉXÉgÉäÇéQè∆
-	1.5ópÇÃÉtÉHÉãÉ_ñºÇîjëπÉtÉ@ÉCÉãîÒï\é¶Ç…ëŒâû
-	ê≥ãKÇÃGBA/NDSÇÃBIOSÇ≈ãNìÆâ¬î\
-	statesaveÇÃÉtÉ@ÉCÉãñºÇÃROMñºÇ∆ÉXÉçÉbÉgî‘çÜÇÃä‘Ç…"_"Çì¸ÇÍÇΩ
-	ÉÅÉjÉÖÅ[ÇÃÉOÉâÉtÉBÉbÉN/ÉTÉEÉìÉhÇÃê›íËÇ…ÉXÉNÉäÅ[ÉìÉVÉáÉbÉgã@î\Çí«â¡
-		PNG RGB 24bitå`éÆÇ≈dir.cfgÇ≈ê›íËÇµÇΩÉtÉHÉãÉ_Ç…ÅAROMÉtÉ@ÉCÉãñº+îNåéì˙éûä‘Ç≈ï€ë∂Ç≥ÇÍÇ‹Ç∑
-	ÉÅÉjÉÖÅ[éûÇ…ÉAÉiÉçÉOÉLÅ[Ç≈ÇÃëÄçÏÇí«â¡
-	è„ãLÇ…î∫Ç§message.cfg/dir.cfgÇÃïœçX
-	ÉÅÉjÉÖÅ[âÊñ ÇÉJÉXÉ^É}ÉCÉYÇµÇ‚Ç∑Ç¢ÇÊÇ§Ç…ÅAÉÅÉbÉZÅ[ÉWÇÃèáî‘Çì¸ÇÍë÷Ç¶ÇΩ
-	message.cfgÇÃñ|ñÛÇÃí«â¡
-	ÉÅÉjÉÖÅ[Ç…É`Å[ÉgÉtÉ@ÉCÉãÇÃì«Ç›çûÇ›Çí«â¡
-	îÒà√çÜÇÃÉ`Å[ÉgÇ…ëŒâû
-		ÉtÉHÅ[É}ÉbÉgÇÕ
-			direct_v? É`Å[Égñº
+	„É°„Éã„É•„Éº„Åß„ÅÆÊôÇË®àË°®Á§∫/„Éê„ÉÉ„ÉÜ„É™„ÉºÊÆãÈáèË°®Á§∫„ÇíËøΩÂä†
+	ÁµÇ‰∫ÜÊôÇ„Å´222MHz„Å´Êàª„ÅôÊßò„Å´„Åó„Åü
+	„É°„Éã„É•„Éº„Åã„Çâ‚óã„ÇÑ√ó„Éú„Çø„É≥„Åß„Ç≤„Éº„É†„Å´Êàª„ÇãÊôÇ„Å´„ÄÅ„Ç≤„Éº„É†ÂÜÖ„Åß„Éú„Çø„É≥„ÇíË™çË≠ò„Åï„Åõ„Å™„ÅÑÊßò„Å´„Åó„Åü
+		(„Éú„Çø„É≥„ÇíÊîæ„Åó„ÅüÊôÇÁÇπ„ÅßÊàª„Çä„Åæ„Åô) 
+	ROMÁ≠â„ÅÆÈÅ∏ÊäûÊôÇ„Å´R/L„Éú„Çø„É≥„Åß„ÅÆ5Ë°å„Åî„Å®„ÅÆÁßªÂãï„ÇíËøΩÂä†
+	BBS„Å´ÂØÑ„Åõ„Çâ„Çå„ÅüÊÉÖÂ†±„Å´„Çà„Çã„ÄÅRTCÂªª„Çä/mips_stub.S„ÅÆ‰øÆÊ≠£
+	Êó•ÊôÇ„ÅÆË°®Á§∫„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´PSP„ÅÆ„É¨„Ç∏„Çπ„Éà„É™„ÇíÂèÇÁÖß
+	1.5Áî®„ÅÆ„Éï„Ç©„É´„ÉÄÂêç„ÇíÁ†¥Êêç„Éï„Ç°„Ç§„É´ÈùûË°®Á§∫„Å´ÂØæÂøú
+	Ê≠£Ë¶è„ÅÆGBA/NDS„ÅÆBIOS„ÅßËµ∑ÂãïÂèØËÉΩ
+	statesave„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÅÆROMÂêç„Å®„Çπ„É≠„ÉÉ„ÉàÁï™Âè∑„ÅÆÈñì„Å´"_"„ÇíÂÖ•„Çå„Åü
+	„É°„Éã„É•„Éº„ÅÆ„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ/„Çµ„Ç¶„É≥„Éâ„ÅÆË®≠ÂÆö„Å´„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÊ©üËÉΩ„ÇíËøΩÂä†
+		PNG RGB 24bitÂΩ¢Âºè„Åßdir.cfg„ÅßË®≠ÂÆö„Åó„Åü„Éï„Ç©„É´„ÉÄ„Å´„ÄÅROM„Éï„Ç°„Ç§„É´Âêç+Âπ¥ÊúàÊó•ÊôÇÈñì„Åß‰øùÂ≠ò„Åï„Çå„Åæ„Åô
+	„É°„Éã„É•„ÉºÊôÇ„Å´„Ç¢„Éä„É≠„Ç∞„Ç≠„Éº„Åß„ÅÆÊìç‰Ωú„ÇíËøΩÂä†
+	‰∏äË®ò„Å´‰º¥„ÅÜmessage.cfg/dir.cfg„ÅÆÂ§âÊõ¥
+	„É°„Éã„É•„ÉºÁîªÈù¢„Çí„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åó„ÇÑ„Åô„ÅÑ„Çà„ÅÜ„Å´„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈ†ÜÁï™„ÇíÂÖ•„ÇåÊõø„Åà„Åü
+	message.cfg„ÅÆÁøªË®≥„ÅÆËøΩÂä†
+	„É°„Éã„É•„Éº„Å´„ÉÅ„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„ÇíËøΩÂä†
+	ÈùûÊöóÂè∑„ÅÆ„ÉÅ„Éº„Éà„Å´ÂØæÂøú
+		„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅØ
+			direct_v? „ÉÅ„Éº„ÉàÂêç
 			AAAAAAAA DDDDDDDD
-		direct_v?Ç™îÒà√çÜópÇÃéØï éqÇ≈ÅAv1Ç≈PAR V1/V2ópÅEv3Ç≈PAR V3ópÇÃà√çÜâªëOÇÃÉfÅ[É^Ç™égÇ¶ÇÈ
-		AAAAAAAAÇ™ÉIÉyÉRÅ[Éh/ÉAÉhÉåÉXÅADDDDDDDDÇ™ÉfÅ[É^
+		direct_v?„ÅåÈùûÊöóÂè∑Áî®„ÅÆË≠òÂà•Â≠ê„Åß„ÄÅv1„ÅßPAR V1/V2Áî®„Éªv3„ÅßPAR V3Áî®„ÅÆÊöóÂè∑ÂåñÂâç„ÅÆ„Éá„Éº„Çø„Åå‰Ωø„Åà„Çã
+		AAAAAAAA„Åå„Ç™„Éö„Ç≥„Éº„Éâ/„Ç¢„Éâ„É¨„Çπ„ÄÅDDDDDDDD„Åå„Éá„Éº„Çø
 
-	É\Å[ÉXÇ©ÇÁÇÃÉrÉãÉhÇ…libpngÇ™ïKóv
+	„ÇΩ„Éº„Çπ„Åã„Çâ„ÅÆ„Éì„É´„Éâ„Å´libpng„ÅåÂøÖË¶Å
 
 -UnOfficial gpSP kai jp 2.8
-	gpSP0.9ÇÉxÅ[ÉXÇ…ÇµÇ‹ÇµÇΩ~
-	äeéÌÉÅÉbÉZÅ[ÉWóﬁÇmessage.cfgÇ…ï™ó£~
-	ÉtÉHÉìÉgÇÃê›íËÉtÉ@ÉCÉãfont.cfgÇêVê›~
-	fbmÉtÉHÉìÉgÇ∆message.cfgÇópà”Ç∑ÇÍÇŒëΩåæåÍÇ…ëŒâû~
-	äeéÌÉfÉBÉåÉNÉgÉäê›íËÉtÉ@ÉCÉãdir.cfgÇêVê›~
-	ÉTÉEÉìÉhÉoÉbÉtÉ@Ç™2048Ç≈óéÇøÇÈÇÃÇ(Ç∆ÇËÇ†Ç¶Ç∏)èCê≥~
-	backupÇÃï€ë∂ÇèIóπéûÇ…ÇµÇƒÇ¢ÇÈèÍçáÅAHOMEÉLÅ[Ç≈ÇÃèIóπéûÇ…Ç‡backupÇï€ë∂Ç∑ÇÈÇÊÇ§Ç…ÇµÇΩ~
-	backupÇÃï€ë∂ÇèIóπéûÇ…ÇµÇƒÇ¢ÇÈèÍçáÅAï ÉQÅ[ÉÄÇÃÉçÅ[ÉhÇçsÇ¡ÇΩç€Ç…Ç‡backupÇï€ë∂Ç∑ÇÈÇÊÇ§Ç…ÇµÇΩ~
-	8å¬Ç‹Ç≈ÇÃidle_loop_eliminate_targetÇ…ëŒâû~
-	ÉXÉeÅ[ÉgÉZÅ[Éu/RTCÇÃéûçèÇ…PSPñ{ëÃÇÃê›íËÇégópÇ∑ÇÈÇÊÇ§Ç…ÇµÇΩ~
-
-	cfgÉtÉ@ÉCÉãÇÃÉtÉHÅ[É}ÉbÉgÇ…Ç¬Ç¢Çƒ
-		çsì™Ç™#ÇÃçsÇÕÉRÉÅÉìÉgï∂Ç≈Ç∑
-		çsì™ÇÃ!à»ç~ÅAâ¸çsÇ‹Ç≈Ç™ÉfÅ[É^Ç≈Ç∑
-		!ï∂Ç™ë±Ç¢ÇΩèÍçáÅAì‡ïîÇ≈òAåãÇ≥ÇÍÇ‹Ç∑
-		íPèÉÇ…èáî‘Ç…ì«Ç›çûÇÒÇ≈Ç¢ÇÈÇæÇØÇ»ÇÃÇ≈ÅAèáî‘ÇïœÇ¶ÇÈÇ∆ê≥èÌÇ…ìÆÇ´Ç‹ÇπÇÒ
-		1ÉfÅ[É^Ç…ïtÇ´511byteÇ‹Ç≈Ç≈Ç∑ÅBí¥Ç¶ÇΩèÍçáê≥èÌÇ…ìÆÇ´Ç‹ÇπÇÒ 
-		ÉGÉâÅ[É`ÉFÉbÉNÇÕÇŸÇ∆ÇÒÇ«ÇµÇƒÇ¢Ç‹ÇπÇÒ
-		ÉÅÉbÉZÅ[ÉWÇï“èWÇ∑ÇÈç€ÇÕÅAÉfÅ[É^Å[ì‡ÇÃ%s,%dìôÇÕïKÇ∏écÇµÇƒÇ≠ÇæÇ≥Ç¢
+	gpSP0.9„Çí„Éô„Éº„Çπ„Å´„Åó„Åæ„Åó„Åü~
+	ÂêÑÁ®Æ„É°„ÉÉ„Çª„Éº„Ç∏È°û„Çímessage.cfg„Å´ÂàÜÈõ¢~
+	„Éï„Ç©„É≥„Éà„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´font.cfg„ÇíÊñ∞Ë®≠~
+	fbm„Éï„Ç©„É≥„Éà„Å®message.cfg„ÇíÁî®ÊÑè„Åô„Çå„Å∞Â§öË®ÄË™û„Å´ÂØæÂøú~
+	ÂêÑÁ®Æ„Éá„Ç£„É¨„ÇØ„Éà„É™Ë®≠ÂÆö„Éï„Ç°„Ç§„É´dir.cfg„ÇíÊñ∞Ë®≠~
+	„Çµ„Ç¶„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„Åå2048„ÅßËêΩ„Å°„Çã„ÅÆ„Çí(„Å®„Çä„ÅÇ„Åà„Åö)‰øÆÊ≠£~
+	backup„ÅÆ‰øùÂ≠ò„ÇíÁµÇ‰∫ÜÊôÇ„Å´„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅHOME„Ç≠„Éº„Åß„ÅÆÁµÇ‰∫ÜÊôÇ„Å´„ÇÇbackup„Çí‰øùÂ≠ò„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü~
+	backup„ÅÆ‰øùÂ≠ò„ÇíÁµÇ‰∫ÜÊôÇ„Å´„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅÂà•„Ç≤„Éº„É†„ÅÆ„É≠„Éº„Éâ„ÇíË°å„Å£„ÅüÈöõ„Å´„ÇÇbackup„Çí‰øùÂ≠ò„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü~
+	8ÂÄã„Åæ„Åß„ÅÆidle_loop_eliminate_target„Å´ÂØæÂøú~
+	„Çπ„ÉÜ„Éº„Éà„Çª„Éº„Éñ/RTC„ÅÆÊôÇÂàª„Å´PSPÊú¨‰Ωì„ÅÆË®≠ÂÆö„Çí‰ΩøÁî®„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü~
+
+	cfg„Éï„Ç°„Ç§„É´„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´„Å§„ÅÑ„Å¶
+		Ë°åÈ†≠„Åå#„ÅÆË°å„ÅØ„Ç≥„É°„É≥„ÉàÊñá„Åß„Åô
+		Ë°åÈ†≠„ÅÆ!‰ª•Èôç„ÄÅÊîπË°å„Åæ„Åß„Åå„Éá„Éº„Çø„Åß„Åô
+		!Êñá„ÅåÁ∂ö„ÅÑ„ÅüÂ†¥Âêà„ÄÅÂÜÖÈÉ®„ÅßÈÄ£Áµê„Åï„Çå„Åæ„Åô
+		ÂçòÁ¥î„Å´È†ÜÁï™„Å´Ë™≠„ÅøËæº„Çì„Åß„ÅÑ„Çã„Å†„Åë„Å™„ÅÆ„Åß„ÄÅÈ†ÜÁï™„ÇíÂ§â„Åà„Çã„Å®Ê≠£Â∏∏„Å´Âãï„Åç„Åæ„Åõ„Çì
+		1„Éá„Éº„Çø„Å´‰ªò„Åç511byte„Åæ„Åß„Åß„Åô„ÄÇË∂Ö„Åà„ÅüÂ†¥ÂêàÊ≠£Â∏∏„Å´Âãï„Åç„Åæ„Åõ„Çì 
+		„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ„ÅØ„Åª„Å®„Çì„Å©„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì
+		„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ∑®ÈõÜ„Åô„ÇãÈöõ„ÅØ„ÄÅ„Éá„Éº„Çø„ÉºÂÜÖ„ÅÆ%s,%dÁ≠â„ÅØÂøÖ„ÅöÊÆã„Åó„Å¶„Åè„Å†„Åï„ÅÑ
 
 -gpSP kai 2.7
-	åáî‘
+	Ê¨†Áï™
 
 -gpSP kai 2.6
-	kai 2.5ÇÃÉoÉOèCê≥
-		vramì«çû/èëçûéûÇÃÉoÉOèCê≥(çƒèCê≥)
-			0x18000Ç…ì«çû/èëçûÇµÇΩÇ∆Ç´ÇÃèCê≥
-		vramÇàÍïîîjâÛÇµÇƒÇ¢ÇΩÇÃÇèCê≥
-		ÉTÉEÉìÉhÇÃRLÉ`ÉÉÉìÉlÉãÇÃì¸ÇÍë÷Ç¶(gbcå›ä∑ÉTÉEÉìÉhÇ‡èCê≥)(96éÅÇÊÇË)
-	çÇë¨âª/ç≈ìKâª
-		É`Å[ÉgÉRÅ[ÉhÇïWèÄÇ≈OFFÇ…ÇµÇΩ
-			ïKóvÇ»ÇÁÇŒmake -e"OPT=-DCHEAT"Ç≈ÉrÉãÉhÇµÇƒÇ≠ÇæÇ≥Ç¢
-		ÉÅÉCÉìÉãÅ[ÉvÇÃïsóvÇ»ïœêîëÄçÏÇçÌèú
-		mips_stub.SÇÃàÍïîÇdelay slotÇégópÇ∑ÇÈÇÊÇ§Ç…ÇµÇΩ(5éÅÇÊÇË)
-		mips_stub.SÇÃÉ}ÉNÉçÇìWäJÇµdelay slotÇégópÇ∑ÇÈólÇ…ÇµÇΩ
-	êVãKëŒâû
-		ìçëæòYìdìSÇìÆÇ≠ÇÊÇ§Ç…ÇµÇΩ(5éÅÇÊÇË)
-
-	ägí£
-	debugÉÇÅ[ÉhÇÃí«â¡
-		make -e"OPT=-DDEBUG_MODE"Ç≈ÉrÉãÉhÇ∑ÇÈÇ±Ç∆Ç…ÇÊÇËdebugÉÇÅ[ÉhÇ™í«â¡Ç≥ÇÍÇ‹Ç∑
-		âÊñ ÉTÉCÉYÇdebugÇ…ÇµÇƒÅ¢+è„â∫Ç…Çƒï\é¶ÉÇÅ[Éhêÿë÷Ç≈Ç∑
-		mode 0 ï\é¶ñ≥Çµ
-		mode 1 VBALNKäÑçûÇ›Ç…ìØä˙ÇµÇƒï\é¶
-		mode 2 HBLANKäÑçûÇ›Ç…ìØä˙ÇµÇƒï\é¶
+	kai 2.5„ÅÆ„Éê„Ç∞‰øÆÊ≠£
+		vramË™≠Ëæº/Êõ∏ËæºÊôÇ„ÅÆ„Éê„Ç∞‰øÆÊ≠£(ÂÜç‰øÆÊ≠£)
+			0x18000„Å´Ë™≠Ëæº/Êõ∏Ëæº„Åó„Åü„Å®„Åç„ÅÆ‰øÆÊ≠£
+		vram„Çí‰∏ÄÈÉ®Á†¥Â£ä„Åó„Å¶„ÅÑ„Åü„ÅÆ„Çí‰øÆÊ≠£
+		„Çµ„Ç¶„É≥„Éâ„ÅÆRL„ÉÅ„É£„É≥„Éç„É´„ÅÆÂÖ•„ÇåÊõø„Åà(gbc‰∫íÊèõ„Çµ„Ç¶„É≥„Éâ„ÇÇ‰øÆÊ≠£)(96Ê∞è„Çà„Çä)
+	È´òÈÄüÂåñ/ÊúÄÈÅ©Âåñ
+		„ÉÅ„Éº„Éà„Ç≥„Éº„Éâ„ÇíÊ®ôÊ∫ñ„ÅßOFF„Å´„Åó„Åü
+			ÂøÖË¶Å„Å™„Çâ„Å∞make -e"OPT=-DCHEAT"„Åß„Éì„É´„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
+		„É°„Ç§„É≥„É´„Éº„Éó„ÅÆ‰∏çË¶Å„Å™Â§âÊï∞Êìç‰Ωú„ÇíÂâäÈô§
+		mips_stub.S„ÅÆ‰∏ÄÈÉ®„Çídelay slot„Çí‰ΩøÁî®„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü(5Ê∞è„Çà„Çä)
+		mips_stub.S„ÅÆ„Éû„ÇØ„É≠„ÇíÂ±ïÈñã„Åódelay slot„Çí‰ΩøÁî®„Åô„ÇãÊßò„Å´„Åó„Åü
+	Êñ∞Ë¶èÂØæÂøú
+		Ê°ÉÂ§™ÈÉéÈõªÈâÑ„ÇíÂãï„Åè„Çà„ÅÜ„Å´„Åó„Åü(5Ê∞è„Çà„Çä)
+
+	Êã°Âºµ
+	debug„É¢„Éº„Éâ„ÅÆËøΩÂä†
+		make -e"OPT=-DDEBUG_MODE"„Åß„Éì„É´„Éâ„Åô„Çã„Åì„Å®„Å´„Çà„Çädebug„É¢„Éº„Éâ„ÅåËøΩÂä†„Åï„Çå„Åæ„Åô
+		ÁîªÈù¢„Çµ„Ç§„Ç∫„Çídebug„Å´„Åó„Å¶‚ñ≥+‰∏ä‰∏ã„Å´„Å¶Ë°®Á§∫„É¢„Éº„ÉâÂàáÊõø„Åß„Åô
+		mode 0 Ë°®Á§∫ÁÑ°„Åó
+		mode 1 VBALNKÂâ≤Ëæº„Åø„Å´ÂêåÊúü„Åó„Å¶Ë°®Á§∫
+		mode 2 HBLANKÂâ≤Ëæº„Åø„Å´ÂêåÊúü„Åó„Å¶Ë°®Á§∫
 
 	for eLoader
-		ÉNÉçÉbÉNÇÃê›íËÇçsÇÌÇ»Ç¢ÇÊÇ§Ç…ÇµÇΩ
-		eloaderÇ≈ê›íËÇµÇΩÉNÉçÉbÉNÇ≈ãNìÆÇ∑ÇÈÇ∆évÇÌÇÍÇ‹Ç∑
+		„ÇØ„É≠„ÉÉ„ÇØ„ÅÆË®≠ÂÆö„ÇíË°å„Çè„Å™„ÅÑ„Çà„ÅÜ„Å´„Åó„Åü
+		eloader„ÅßË®≠ÂÆö„Åó„Åü„ÇØ„É≠„ÉÉ„ÇØ„ÅßËµ∑Âãï„Åô„Çã„Å®ÊÄù„Çè„Çå„Åæ„Åô
 
-	ÉrÉãÉhéûÇÃÉIÉvÉVÉáÉìÇ…Ç¬Ç¢Çƒ
-		make kxploit Ç≈1.5ópÇÃé¿çsÉtÉ@ÉCÉãçÏê¨ÇµÇ‹Ç∑
-		make -e"OPT=Å`" Ç≈ÉIÉvÉVÉáÉìÇê›íËÇµÇ‹Ç∑
-			OPT=-DDEBUG_MODE	ÉfÉoÉbÉOÉÇÅ[Éh
-			OPT=-DCHEAT			É`Å[ÉgóLå¯
-			OPT=-DELOADER		eLoaderëŒâû
-		ó·)1.5ópé¿çsÉtÉ@ÉCÉãÇeLoader,ÉfÉoÉbÉO,É`Å[ÉgëŒâûÇ≈çÏê¨
+	„Éì„É´„ÉâÊôÇ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„Å´„Å§„ÅÑ„Å¶
+		make kxploit „Åß1.5Áî®„ÅÆÂÆüË°å„Éï„Ç°„Ç§„É´‰ΩúÊàê„Åó„Åæ„Åô
+		make -e"OPT=ÔΩû" „Åß„Ç™„Éó„Ç∑„Éß„É≥„ÇíË®≠ÂÆö„Åó„Åæ„Åô
+			OPT=-DDEBUG_MODE	„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ
+			OPT=-DCHEAT			„ÉÅ„Éº„ÉàÊúâÂäπ
+			OPT=-DELOADER		eLoaderÂØæÂøú
+		‰æã)1.5Áî®ÂÆüË°å„Éï„Ç°„Ç§„É´„ÇíeLoader,„Éá„Éê„ÉÉ„Ç∞,„ÉÅ„Éº„ÉàÂØæÂøú„Åß‰ΩúÊàê
 			make kxploit -e"OPT=-DDEBUG_MODE -DCHEAT -DELOADER"
 
 -gpSP kai 2.5
-	ä»à’/ÉoÉOÇÃëΩÇ¢ É`Å[Égã@î\ÇÃí«â¡
-		ÉAÉhÉåÉX0x02000000Å`(ewram)Ç∆ÅA0x03000000Å`(iwram)Ç…ëŒâû
-		1byteÇÃèëä∑Ç¶ÇÃÇ›ëŒâû
-
-		ÉtÉ@ÉCÉãñºÇÕ"ROMÉtÉ@ÉCÉãñº".chtÇ≈Ç∑ÅBROMÉtÉ@ÉCÉãÇ∆ìØÇ∂èÍèäÇ…Ç®Ç¢ÇƒÇ≠ÇæÇ≥Ç¢
-		ROMÉtÉ@ÉCÉãñºÇ™"rpg.gba"ÇÃèÍçáÅA"rpg.cht"Ç≈Ç∑
-
-		ÉtÉ@ÉCÉãÇÃÉtÉHÅ[É}ÉbÉgÇÕ
-			#ÉRÉÅÉìÉgçs
-			 ÉRÅ[ÉhñºèÃ:ÉAÉhÉåÉX:byte data(16êi)Ç≈Ç∑ÅB
-		ó·
+	Á∞°Êòì/„Éê„Ç∞„ÅÆÂ§ö„ÅÑ „ÉÅ„Éº„ÉàÊ©üËÉΩ„ÅÆËøΩÂä†
+		„Ç¢„Éâ„É¨„Çπ0x02000000ÔΩû(ewram)„Å®„ÄÅ0x03000000ÔΩû(iwram)„Å´ÂØæÂøú
+		1byte„ÅÆÊõ∏Êèõ„Åà„ÅÆ„ÅøÂØæÂøú
+
+		„Éï„Ç°„Ç§„É´Âêç„ÅØ"ROM„Éï„Ç°„Ç§„É´Âêç".cht„Åß„Åô„ÄÇROM„Éï„Ç°„Ç§„É´„Å®Âêå„ÅòÂ†¥ÊâÄ„Å´„Åä„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ
+		ROM„Éï„Ç°„Ç§„É´Âêç„Åå"rpg.gba"„ÅÆÂ†¥Âêà„ÄÅ"rpg.cht"„Åß„Åô
+
+		„Éï„Ç°„Ç§„É´„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅØ
+			#„Ç≥„É°„É≥„ÉàË°å
+			 „Ç≥„Éº„ÉâÂêçÁß∞:„Ç¢„Éâ„É¨„Çπ:byte data(16ÈÄ≤)„Åß„Åô„ÄÇ
+		‰æã
 			#cheat test
 			test 01:0200123F:6F
 
-		ÉRÅ[ÉhÇÃÉTÅ[É`Ç‚É`Å[ÉgÇÃON/OFFÇÕÇ‹ÇæèoóàÇ‹ÇπÇÒÅB
+		„Ç≥„Éº„Éâ„ÅÆ„Çµ„Éº„ÉÅ„ÇÑ„ÉÅ„Éº„Éà„ÅÆON/OFF„ÅØ„Åæ„Å†Âá∫Êù•„Åæ„Åõ„Çì„ÄÇ
 
-	vramèëçûéûÇÃÉoÉOèCê≥(130éÅÇÊÇË)
-	sramÉTÉCÉYé©ìÆîªíËÇÃÉoÉOèCê≥
-	ÉJÅ[ÉrÉBÇÃïsãÔçáèCê≥(5/104éÅÇÊÇË)
-	ÉTÉEÉìÉhÇÃRLÉ`ÉÉÉìÉlÉãÇÃì¸ÇÍë÷Ç¶(96éÅÇÊÇË)
-	ÉÅÉ_ÉçÉbÉgÉiÉrÇÃïsãÔçáèCê≥(5/104éÅÇÊÇË)
+	vramÊõ∏ËæºÊôÇ„ÅÆ„Éê„Ç∞‰øÆÊ≠£(130Ê∞è„Çà„Çä)
+	sram„Çµ„Ç§„Ç∫Ëá™ÂãïÂà§ÂÆö„ÅÆ„Éê„Ç∞‰øÆÊ≠£
+	„Ç´„Éº„Éì„Ç£„ÅÆ‰∏çÂÖ∑Âêà‰øÆÊ≠£(5/104Ê∞è„Çà„Çä)
+	„Çµ„Ç¶„É≥„Éâ„ÅÆRL„ÉÅ„É£„É≥„Éç„É´„ÅÆÂÖ•„ÇåÊõø„Åà(96Ê∞è„Çà„Çä)
+	„É°„ÉÄ„É≠„ÉÉ„Éà„Éä„Éì„ÅÆ‰∏çÂÖ∑Âêà‰øÆÊ≠£(5/104Ê∞è„Çà„Çä)
 
 	for eLoader
-	8MBà»è„ÇÃROMÇÃï™äÑÉçÅ[ÉhÇ…ëŒâû
-		8MBà»è„ÇÃROMÇÕZIPà≥èkÇ…ëŒâûÇµÇƒÇ¢Ç‹ÇπÇÒ
-		Clock Speed 300MHz/Bus Speed 150MHzÇ…ê›íË
+	8MB‰ª•‰∏ä„ÅÆROM„ÅÆÂàÜÂâ≤„É≠„Éº„Éâ„Å´ÂØæÂøú
+		8MB‰ª•‰∏ä„ÅÆROM„ÅØZIPÂúßÁ∏Æ„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì
+		Clock Speed 300MHz/Bus Speed 150MHz„Å´Ë®≠ÂÆö
 
 -gpSP kai 2.4
-	âÊñ ÇÃï\é¶ÉÇÅ[ÉhÇí«â¡ÅB
-		unscaled 3:2				(ä˘ë∂ÇÃÉÇÅ[Éh)
-		scaled 3:2(LINEAR)			(ä˘ë∂ÇÃÉÇÅ[Éh)
-		fullscreen 16:9(LINEAR)		(ä˘ë∂ÇÃÉÇÅ[Éh)
-		scaled 3:2(NEAREST)			(ÉtÉBÉãÉ^Å[ÇégópÇµÇ»Ç¢ÉÇÅ[Éh)
-		fullscreen 16:9(NEAREST)	(ÉtÉBÉãÉ^Å[ÇégópÇµÇ»Ç¢ÉÇÅ[Éh)
-		scaled 1.75(NEAREST)		(1.75ÉoÉCÉÇÅ[Éh/è„â∫ 4dotÇ™êÿÇÍÇ‹Ç∑)
+	ÁîªÈù¢„ÅÆË°®Á§∫„É¢„Éº„Éâ„ÇíËøΩÂä†„ÄÇ
+		unscaled 3:2				(Êó¢Â≠ò„ÅÆ„É¢„Éº„Éâ)
+		scaled 3:2(LINEAR)			(Êó¢Â≠ò„ÅÆ„É¢„Éº„Éâ)
+		fullscreen 16:9(LINEAR)		(Êó¢Â≠ò„ÅÆ„É¢„Éº„Éâ)
+		scaled 3:2(NEAREST)			(„Éï„Ç£„É´„Çø„Éº„Çí‰ΩøÁî®„Åó„Å™„ÅÑ„É¢„Éº„Éâ)
+		fullscreen 16:9(NEAREST)	(„Éï„Ç£„É´„Çø„Éº„Çí‰ΩøÁî®„Åó„Å™„ÅÑ„É¢„Éº„Éâ)
+		scaled 1.75(NEAREST)		(1.75„Éê„Ç§„É¢„Éº„Éâ/‰∏ä‰∏ã 4dot„ÅåÂàá„Çå„Åæ„Åô)
 
 -gpSP kai 2.3
-	sound I/OÇÃbug fixÅB
-		Ç¢Ç≠Ç¬Ç©ÇÃÉQÅ[ÉÄÇ™ìÆÇ≠ÇÊÇ§Ç…Ç»ÇËÇ‹ÇµÇΩÅB
+	sound I/O„ÅÆbug fix„ÄÇ
+		„ÅÑ„Åè„Å§„Åã„ÅÆ„Ç≤„Éº„É†„ÅåÂãï„Åè„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åó„Åü„ÄÇ
 
 -gpSP kai 2.2
-	save stateÇÃçÇë¨âªÅB
+	save state„ÅÆÈ´òÈÄüÂåñ„ÄÇ
 
 -gpSP kai 2.1
-	idle_loop_eliminate_targetÇÃï°êîílÇ…ëŒâûÅB
+	idle_loop_eliminate_target„ÅÆË§áÊï∞ÂÄ§„Å´ÂØæÂøú„ÄÇ
 
 -gpSP kai 2
-	sound buffer sizeÇÃÉRÉìÉtÉBÉOÇí«â¡ÅB
-		2048Å`12288Ç‹Ç≈ê›íËâ¬î\ÅB(ÉfÉtÉHÉãÉgÇÕ2048/ÉIÉäÉWÉiÉãÇÕ8192)
+	sound buffer size„ÅÆ„Ç≥„É≥„Éï„Ç£„Ç∞„ÇíËøΩÂä†„ÄÇ
+		2048ÔΩû12288„Åæ„ÅßË®≠ÂÆöÂèØËÉΩ„ÄÇ(„Éá„Éï„Ç©„É´„Éà„ÅØ2048/„Ç™„É™„Ç∏„Éä„É´„ÅØ8192)
 
-	ê›íËÇµÇΩsound buffer sizeÇGAME CFGÉtÉ@ÉCÉãÇ…ï€ë∂Ç≥ÇÍÇÈÇÊÇ§Ç…ÇµÇΩÅB
-		GAME CFGÉtÉ@ÉCÉãÇÃÉTÉCÉYÇ™12byte -> 16byteÇ…ïœçXÅB
+	Ë®≠ÂÆö„Åó„Åüsound buffer size„ÇíGAME CFG„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å´„Åó„Åü„ÄÇ
+		GAME CFG„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫„Åå12byte -> 16byte„Å´Â§âÊõ¥„ÄÇ
 
 -gpSP kai (1)
-	ÉAÉiÉçÉOÉpÉbÉhÇÃÉRÉìÉtÉBÉOÇí«â¡
+	„Ç¢„Éä„É≠„Ç∞„Éë„ÉÉ„Éâ„ÅÆ„Ç≥„É≥„Éï„Ç£„Ç∞„ÇíËøΩÂä†
 
-	ê›íËÇµÇΩsound buffer sizeÇgpSP CFGÉtÉ@ÉCÉãÇ…ï€ë∂Ç≥ÇÍÇÈÇÊÇ§Ç…ÇµÇΩÅB
-		gpSP CFGÉtÉ@ÉCÉãÇÃÉTÉCÉYÇ™56byte -> 72byteÇ…ïœçXÅB
+	Ë®≠ÂÆö„Åó„Åüsound buffer size„ÇígpSP CFG„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å´„Åó„Åü„ÄÇ
+		gpSP CFG„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫„Åå56byte -> 72byte„Å´Â§âÊõ¥„ÄÇ
 
 takka takka@tfact.net
 http://www.tfact.jp/psp/wiki/
Only in 30_new/: settings
diff -ru 30_orig/sound.c 30_new/sound.c
--- 30_orig/sound.c	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/sound.c	2007-08-06 23:47:50.000000000 +0900
@@ -25,7 +25,7 @@
 direct_sound_struct direct_sound_channel[2];
 gbc_sound_struct gbc_sound_channel[4];
 
-//u32 sound_frequency = 44100;
+u32 sound_frequency = 44100;
 
 SDL_AudioSpec sound_settings;
 SDL_mutex *sound_mutex;
@@ -43,38 +43,24 @@
 
 u32 gbc_sound_wave_update;
 
-u32 gbc_sound_wave_volume[4] = { 0, 16384, 8192, 4096 };
+// u32 gbc_sound_wave_volume[4] = { 0, 16384, 8192, 4096 };
 
 void sound_callback(void *userdata, Uint8 *stream, int length);
 void init_noise_table(u32 *table, u32 period, u32 bit_length);
 
-// Queue 1, 2, or 4 samples to the top of the DS FIFO, wrap around circularly
 
-#define sound_timer_queue(size, value)                                        \
-  *((s##size *)(ds->fifo + ds->fifo_top)) = value;                            \
-  ds->fifo_top = (ds->fifo_top + 1) % 32;                                     \
-
-void sound_timer_queue8(u32 channel, u8 value)
-{
-  direct_sound_struct *ds = direct_sound_channel + channel;
-  sound_timer_queue(8, value);
-}
-
-void sound_timer_queue16(u32 channel, u16 value)
+/* „Éû„Ç∏„Ç´„É´„Éê„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰∏çÂÖ∑Âêà‰øÆÊ≠£ */
+void sound_timer_queue32(u8 channel)
 {
   direct_sound_struct *ds = direct_sound_channel + channel;
-  sound_timer_queue(8, value & 0xFF);
-  sound_timer_queue(8, value >> 8);
-}
+  u8 offset = channel * 4;
+  u8 i;
 
-void sound_timer_queue32(u32 channel, u32 value)
-{
-  direct_sound_struct *ds = direct_sound_channel + channel;
-
-  sound_timer_queue(8, value & 0xFF);
-  sound_timer_queue(8, (value >> 8) & 0xFF);
-  sound_timer_queue(8, (value >> 16) & 0xFF);
-  sound_timer_queue(8, value >> 24);
+  for(i = 0xA0; i <= 0xA3; i++)
+  {
+    ds->fifo[ds->fifo_top] = ADDRESS8(io_registers, i + offset);
+    ds->fifo_top = (ds->fifo_top + 1) % 32;
+  }
 }
 
 // Unqueue 1 sample from the base of the DS FIFO and place it on the audio
@@ -153,7 +139,15 @@
   ds->buffer_index = buffer_index;
   ds->fifo_fractional = FP16_16_FRACTIONAL_PART(fifo_fractional);
 
-  if(((ds->fifo_top - ds->fifo_base) % 32) <= 16)
+  /* „Éû„Ç∏„Ç´„É´„Éê„Ç±„Éº„Ç∑„Éß„É≥„ÅßÂãï‰Ωú„ÅåÈÅÖ„Åè„Å™„Çã„ÅÆ„ÅåÊîπÂñÑ„Åï„Çå„Çã */
+  u8 fifo_length;
+
+  if(ds->fifo_top > ds->fifo_base)
+    fifo_length = ds->fifo_top - ds->fifo_base;
+  else
+    fifo_length = ds->fifo_top + (32 - ds->fifo_base);
+
+  if(fifo_length <= 16)
   {
     if(dma[1].direct_sound_channel == channel)
       dma_transfer(dma + 1);
@@ -165,7 +159,7 @@
 
 void sound_reset_fifo(u32 channel)
 {
-  direct_sound_struct *ds = direct_sound_channel;
+  direct_sound_struct *ds = direct_sound_channel + channel;
 
   memset(ds->fifo, 0, 32);
 }
@@ -185,7 +179,7 @@
   { 0xF8, 0xF8, 0xF8, 0xF8, 0x07, 0xF8, 0xF8, 0xF8 },
   { 0xF8, 0xF8, 0xF8, 0xF8, 0x07, 0x07, 0xF8, 0xF8 },
   { 0xF8, 0xF8, 0x07, 0x07, 0x07, 0x07, 0xF8, 0xF8 },
-  { 0x07, 0x07, 0x07, 0x07, 0xF8, 0xF8, 0x07, 0x07 },
+  { 0x07, 0x07, 0x07, 0x07, 0xF8, 0xF8, 0x07, 0x07 }
 };
 
 s8 wave_samples[64];
@@ -263,14 +257,15 @@
       else                                                                    \
         rate = rate + (rate >> gs->sweep_shift);                              \
                                                                               \
-      if(rate > 2048) {                                                       \
-        rate = 0;                                                             \
-        frequency_step = 0;                                                   \
-      } else {                                                                \
-        frequency_step = FLOAT_TO_FP16_16(((131072.0 / (2048 - rate)) * 8.0)  \
-        / SOUND_FREQUENCY);                                                   \
+      if(rate > 2047)                                                         \
+      {                                                                       \
+        gs->active_flag = 0;                                                  \
+        break;                                                                \
       }                                                                       \
                                                                               \
+      frequency_step = FLOAT_TO_FP16_16(((131072.0 / (2048 - rate)) * 8.0)    \
+       / sound_frequency);                                                    \
+                                                                              \
       gs->frequency_step = frequency_step;                                    \
       gs->rate = rate;                                                        \
                                                                               \
@@ -317,6 +312,8 @@
   tick_counter += gbc_sound_tick_step;                                        \
   if(tick_counter > 0xFFFF)                                                   \
   {                                                                           \
+    tick_counter &= 0xFFFF;                                                   \
+                                                                              \
     if(gs->length_status)                                                     \
     {                                                                         \
       u32 length_ticks = gs->length_ticks - 1;                                \
@@ -331,8 +328,6 @@
                                                                               \
     update_tone_##envelope_op();                                              \
     update_tone_##sweep_op();                                                 \
-                                                                              \
-    tick_counter &= 0xFFFF;                                                   \
   }                                                                           \
 
 #define gbc_sound_render_sample_right()                                       \
@@ -414,7 +409,7 @@
   }                                                                           \
                                                                               \
   gs->sample_index = sample_index;                                            \
-  gs->tick_counter = tick_counter;                                            \
+  gs->tick_counter = tick_counter                                             \
 
 #define gbc_sound_load_wave_ram(bank)                                         \
   wave_bank = wave_samples + (bank * 32);                                     \
@@ -428,7 +423,7 @@
 void update_gbc_sound(u32 cpu_ticks)
 {
   FIXED16_16 buffer_ticks = FLOAT_TO_FP16_16(((float)(cpu_ticks -
-   gbc_sound_last_cpu_ticks) * SOUND_FREQUENCY) / 16777216.0);
+   gbc_sound_last_cpu_ticks) * sound_frequency) / 16777216.0);
   u32 i, i2;
   gbc_sound_struct *gs = gbc_sound_channel;
   FIXED16_16 sample_index, frequency_step;
@@ -465,7 +460,7 @@
       }
       if(game_config_frameskip_type == auto_frameskip)
       {
-//        sceDisplayWaitVblankStart();
+        sceDisplayWaitVblankStart();
         real_frame_count = 0;
         virtual_frame_count = 0;
       }
@@ -495,15 +490,7 @@
     gs = gbc_sound_channel + 2;
     if(gbc_sound_wave_update)
     {
-      if(gs->wave_bank == 1)
-      {
-        gbc_sound_load_wave_ram(1);
-      }
-      else
-      {
-        gbc_sound_load_wave_ram(0);
-      }
-
+      gbc_sound_load_wave_ram(gs->wave_bank);
       gbc_sound_wave_update = 0;
     }
 
@@ -579,6 +566,10 @@
     while (_length--) *ptr1++ = *ptr2++ = 0;                                  \
   }                                                                           \
 
+
+/*--------------------------------------------------------
+  „Çµ„Ç¶„É≥„Éâ „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
+--------------------------------------------------------*/
 void sound_callback(void *userdata, Uint8 *stream, int length)
 {
   u32 sample_length = length / 2;
@@ -717,11 +708,10 @@
 void init_sound()
 {
   audio_buffer_size = (audio_buffer_size_number * 1024) + 2048;
-  audio_buffer_size_x2 = audio_buffer_size * 2;
 
   SDL_AudioSpec desired_spec =
   {
-    SOUND_FREQUENCY,
+    sound_frequency,
     AUDIO_S16,
     2,
     0,
@@ -732,17 +722,21 @@
     NULL
   };
 
-  gbc_sound_tick_step = FLOAT_TO_FP16_16(256.0 / SOUND_FREQUENCY);
+  SDL_OpenAudio(&desired_spec, &sound_settings);
+  sound_mutex = SDL_CreateMutex();
+  sound_cv = SDL_CreateCond();
+
+  sound_frequency = sound_settings.freq;
+  audio_buffer_size = sound_settings.size;
+  audio_buffer_size_x2 = audio_buffer_size * 3;
+
+  gbc_sound_tick_step = FLOAT_TO_FP16_16(256.0 / sound_frequency);
 
   init_noise_table(noise_table15, 32767, 14);
   init_noise_table(noise_table7, 127, 6);
 
   reset_sound();
 
-  SDL_OpenAudio(&desired_spec, &sound_settings);
-//  sound_frequency = sound_settings.freq;
-  sound_mutex = SDL_CreateMutex();
-  sound_cv = SDL_CreateCond();
   SDL_PauseAudio(0);
 }
 
diff -ru 30_orig/sound.h 30_new/sound.h
--- 30_orig/sound.h	2007-08-16 14:57:05.000000000 +0900
+++ 30_new/sound.h	2007-08-06 23:46:42.000000000 +0900
@@ -103,6 +103,7 @@
 extern u32 gbc_sound_master_volume_right;
 extern u32 gbc_sound_master_volume;
 
+extern u32 sound_frequency;
 extern u32 sound_on;
 
 extern u32 global_enable_audio;
@@ -112,9 +113,7 @@
 extern SDL_mutex *sound_mutex;
 extern SDL_cond *sound_cv;
 
-void sound_timer_queue8(u32 channel, u8 value);
-void sound_timer_queue16(u32 channel, u16 value);
-void sound_timer_queue32(u32 channel, u32 value);
+void sound_timer_queue32(u8 channel);
 void sound_timer(FIXED16_16 frequency_step, u32 channel);
 void sound_reset_fifo(u32 channel);
 void update_gbc_sound(u32 cpu_ticks);
@@ -122,7 +121,7 @@
 void sound_write_mem_savestate(FILE_TAG_TYPE savestate_file);
 void sound_read_savestate(FILE_TAG_TYPE savestate_file);
 
-#define SOUND_FREQUENCY 44100
+// #define SOUND_FREQUENCY 44100
 
 #define gbc_sound_tone_control_low(channel, address)                          \
 {                                                                             \
@@ -137,7 +136,6 @@
   gbc_sound_channel[channel].envelope_initial_ticks = envelope_ticks;         \
   gbc_sound_channel[channel].envelope_ticks = envelope_ticks;                 \
   gbc_sound_channel[channel].envelope_status = (envelope_ticks != 0);         \
-  gbc_sound_channel[channel].envelope_volume = initial_volume;                \
   gbc_sound_update = 1;                                                       \
   ADDRESS16(io_registers, address) = value;                                   \
 }                                                                             \
@@ -147,7 +145,7 @@
   u32 rate = value & 0x7FF;                                                   \
   gbc_sound_channel[channel].rate = rate;                                     \
   gbc_sound_channel[channel].frequency_step =                                 \
-   FLOAT_TO_FP16_16(((131072.0 / (2048 - rate)) * 8.0) / SOUND_FREQUENCY);    \
+   FLOAT_TO_FP16_16(((131072.0 / (2048 - rate)) * 8.0) / sound_frequency);    \
   gbc_sound_channel[channel].length_status = (value >> 14) & 0x01;            \
   if(value & 0x8000)                                                          \
   {                                                                           \
@@ -157,6 +155,8 @@
      gbc_sound_channel[channel].envelope_initial_ticks;                       \
     gbc_sound_channel[channel].envelope_volume =                              \
      gbc_sound_channel[channel].envelope_initial_volume;                      \
+    gbc_sound_channel[channel].sweep_ticks =                                  \
+     gbc_sound_channel[channel].sweep_initial_ticks;                          \
   }                                                                           \
                                                                               \
   gbc_sound_update = 1;                                                       \
@@ -192,10 +192,12 @@
   ADDRESS16(io_registers, 0x70) = value;                                      \
 }                                                                             \
 
-extern u32 gbc_sound_wave_volume[4];
+// extern u32 gbc_sound_wave_volume[4];
 
 #define gbc_sound_tone_control_low_wave()                                     \
 {                                                                             \
+  u32 gbc_sound_wave_volume[4] = { 0, 16384, 8192, 4096 };                    \
+                                                                              \
   gbc_sound_channel[2].length_ticks = 256 - (value & 0xFF);                   \
   if((value >> 15) & 0x01)                                                    \
   {                                                                           \
@@ -215,7 +217,7 @@
   u32 rate = value & 0x7FF;                                                   \
   gbc_sound_channel[2].rate = rate;                                           \
   gbc_sound_channel[2].frequency_step =                                       \
-   FLOAT_TO_FP16_16((2097152.0 / (2048 - rate)) / SOUND_FREQUENCY);           \
+   FLOAT_TO_FP16_16((2097152.0 / (2048 - rate)) / sound_frequency);           \
   gbc_sound_channel[2].length_status = (value >> 14) & 0x01;                  \
   if(value & 0x8000)                                                          \
   {                                                                           \
@@ -234,13 +236,13 @@
   {                                                                           \
     gbc_sound_channel[3].frequency_step =                                     \
      FLOAT_TO_FP16_16(1048576.0 / (1 << (frequency_shift + 1)) /              \
-     SOUND_FREQUENCY);                                                        \
+     sound_frequency);                                                        \
   }                                                                           \
   else                                                                        \
   {                                                                           \
     gbc_sound_channel[3].frequency_step =                                     \
      FLOAT_TO_FP16_16(524288.0 / (dividing_ratio *                            \
-     (1 << (frequency_shift + 1))) / SOUND_FREQUENCY);                        \
+     (1 << (frequency_shift + 1))) / sound_frequency);                        \
   }                                                                           \
   gbc_sound_channel[3].noise_type = (value >> 3) & 0x01;                      \
   gbc_sound_channel[3].length_status = (value >> 14) & 0x01;                  \
@@ -258,13 +260,14 @@
 }                                                                             \
 
 #define gbc_trigger_sound_channel(channel)                                    \
-  gbc_sound_master_volume_right = value & 0x07;                               \
-  gbc_sound_master_volume_left = (value >> 4) & 0x07;                         \
-  gbc_sound_channel[channel].status = ((value >> (channel + 8)) & 0x01) |     \
-   ((value >> (channel + 11)) & 0x03)                                         \
+  gbc_sound_channel[channel].status =                                         \
+  ((value >> (channel + 11)) & 0x02) | ((value >> (channel + 8)) & 0x01)      \
 
 #define gbc_trigger_sound()                                                   \
 {                                                                             \
+  gbc_sound_master_volume_right = value & 0x07;                               \
+  gbc_sound_master_volume_left = (value >> 4) & 0x07;                         \
+                                                                              \
   gbc_trigger_sound_channel(0);                                               \
   gbc_trigger_sound_channel(1);                                               \
   gbc_trigger_sound_channel(2);                                               \
@@ -274,10 +277,11 @@
 
 #define trigger_sound()                                                       \
 {                                                                             \
-  timer[0].direct_sound_channels = (((value >> 10) & 0x01) == 0) |            \
-   ((((value >> 14) & 0x01) == 0) << 1);                                      \
-  timer[1].direct_sound_channels = (((value >> 10) & 0x01) == 1) |            \
-   ((((value >> 14) & 0x01) == 1) << 1);                                      \
+  timer[0].direct_sound_channels =                                            \
+   ((~value >> 13) & 0x02) | ((~value >> 10) & 0x01);                         \
+  timer[1].direct_sound_channels =                                            \
+   ((value >> 13) & 0x02) | ((value >> 10) & 0x01);                           \
+                                                                              \
   direct_sound_channel[0].volume = (value >> 2) & 0x01;                       \
   direct_sound_channel[0].status = (value >> 8) & 0x03;                       \
   direct_sound_channel[1].volume = (value >> 3) & 0x01;                       \
@@ -294,10 +298,7 @@
 #define sound_on()                                                            \
   if(value & 0x80)                                                            \
   {                                                                           \
-    if(sound_on != 1)                                                         \
-    {                                                                         \
-      sound_on = 1;                                                           \
-    }                                                                         \
+    sound_on = 1;                                                             \
   }                                                                           \
   else                                                                        \
   {                                                                           \
@@ -313,7 +314,7 @@
 
 #define sound_update_frequency_step(timer_number)                             \
   timer[timer_number].frequency_step =                                        \
-   FLOAT_TO_FP16_16(16777216.0 / (timer_reload * SOUND_FREQUENCY))            \
+   FLOAT_TO_FP16_16(16777216.0 / (timer_reload * sound_frequency))            \
 
 void reset_sound();
 void sound_exit();
diff -ru 30_orig/video.c 30_new/video.c
--- 30_orig/video.c	2007-08-16 14:57:05.652000000 +0900
+++ 30_new/video.c	2007-08-06 23:46:48.000000000 +0900
@@ -162,21 +162,13 @@
   CONVERT_PALETTE(current_pixel)                                              \
 
 #define tile_lookup_palette(palette, source)                                  \
-  current_pixel = palette[source];                                            \
+  current_pixel = palette[source]                                             \
 
 
-#ifdef RENDER_COLOR16_NORMAL
-
-#define tile_expand_base_normal(index)                                        \
-  tile_expand_base_color16(index)                                             \
-
-#else
-
 #define tile_expand_base_normal(index)                                        \
   tile_lookup_palette(palette, current_pixel);                                \
   dest_ptr[index] = current_pixel                                             \
 
-#endif
 
 #define tile_expand_transparent_normal(index)                                 \
   tile_expand_base_normal(index)                                              \
@@ -621,20 +613,10 @@
 // Draws eight background pixels for the normal renderer, just a bunch of
 // zeros.
 
-#ifdef RENDER_COLOR16_NORMAL
-
-#define tile_4bpp_draw_eight_base_zero_normal()                               \
-  current_pixel = 0;                                                          \
-  tile_4bpp_draw_eight_base_zero(current_pixel)                               \
-
-#else
-
 #define tile_4bpp_draw_eight_base_zero_normal()                               \
   current_pixel = palette[0];                                                 \
   tile_4bpp_draw_eight_base_zero(current_pixel)                               \
 
-#endif
-
 
 // Draws eight 4bpp pixels.
 
@@ -698,7 +680,7 @@
 #define get_tile_4bpp()                                                       \
   current_tile = *map_ptr;                                                    \
   current_palette = (current_tile >> 12) << 4;                                \
-  tile_ptr = tile_base + ((current_tile & 0x3FF) * 32);                       \
+  tile_ptr = tile_base + ((current_tile & 0x3FF) * 32)                        \
 
 
 // Helper macro for drawing clipped 4bpp tiles.
@@ -955,6 +937,7 @@
   }                                                                           \
 }                                                                             \
 
+
 // If rendering a scanline that is not a target A then there's no point in
 // keeping what's underneath it because it can't blend with it.
 
@@ -967,19 +950,9 @@
   }                                                                           \
 
 
-#ifdef RENDER_COLOR16_NORMAL
-
-#define render_scanline_extra_variables_base_normal(bg_type)                  \
-  const u32 pixel_combine = 0                                                 \
-
-#else
-
 #define render_scanline_extra_variables_base_normal(bg_type)                  \
   u16 *palette = palette_ram_converted                                        \
 
-#endif
-
-
 #define render_scanline_extra_variables_base_alpha(bg_type)                   \
   u32 bg_combine = color_combine_mask(5);                                     \
   u32 pixel_combine = color_combine_mask(layer) | (bg_combine << 16);         \
@@ -1450,30 +1423,13 @@
   else                                                                        \
     src_ptr = (u16 *)vram                                                     \
 
-
-#ifdef RENDER_COLOR16_NORMAL
-
-#define render_scanline_vram_setup_mode4()                                    \
-  const u32 pixel_combine = 0;                                                \
-  u8 *src_ptr;                                                                \
-  if(io_registers[REG_DISPCNT] & 0x10)                                        \
-    src_ptr = (u8 *)(vram + 0xA000);                                                  \
-  else                                                                        \
-    src_ptr = (u8 *)vram                                                            \
-
-
-#else
-
 #define render_scanline_vram_setup_mode4()                                    \
   u16 *palette = palette_ram_converted;                                       \
   u8 *src_ptr;                                                                \
   if(io_registers[REG_DISPCNT] & 0x10)                                        \
-    src_ptr = (u8 *)(vram + 0xA000);                                                  \
+    src_ptr = vram + 0xA000;                                                  \
   else                                                                        \
-    src_ptr = (u8 *)vram                                                            \
-
-#endif
-
+    src_ptr = vram                                                            \
 
 
 // Build bitmap scanline rendering functions.
@@ -1738,7 +1694,7 @@
 
 #define obj_render_scale_pixel_8bpp(combine_op, alpha_op)                     \
   current_pixel = tile_ptr[tile_map_offset + (tile_x & 0x07)];                \
-  tile_8bpp_draw_##combine_op(0, none, 0, alpha_op);                          \
+  tile_8bpp_draw_##combine_op(0, none, 0, alpha_op)                           \
 
 #define obj_render_scale(combine_op, color_depth, alpha_op, map_space)        \
 {                                                                             \
@@ -1923,19 +1879,9 @@
 
 // Build obj rendering functions
 
-#ifdef RENDER_COLOR16_NORMAL
-
-#define render_scanline_obj_extra_variables_normal(bg_type)                   \
-  const u32 pixel_combine = (1 << 8)                                          \
-
-#else
-
 #define render_scanline_obj_extra_variables_normal(bg_type)                   \
   u16 *palette = palette_ram_converted + 256                                  \
 
-#endif
-
-
 #define render_scanline_obj_extra_variables_color()                           \
   u32 dest;                                                                   \
   u32 pixel_combine = color_combine_mask(4) | (1 << 8)                        \
@@ -2173,7 +2119,6 @@
     obj_attribute_0 = oam_ptr[0];
     obj_attribute_2 = oam_ptr[2];
     obj_size = obj_attribute_0 & 0xC000;
-    obj_priority = (obj_attribute_2 >> 10) & 0x03;
     obj_mode = (obj_attribute_0 >> 10) & 0x03;
 
     if(((obj_attribute_0 & 0x0300) != 0x0200) && (obj_size != 0xC000) &&
@@ -2186,6 +2131,7 @@
 
       obj_attribute_1 = oam_ptr[1];
       obj_size = ((obj_size >> 12) & 0x0C) | (obj_attribute_1 >> 14);
+      obj_priority = (obj_attribute_2 >> 10) & 0x03;
       obj_height = obj_height_table[obj_size];
       obj_width = obj_width_table[obj_size];
 
@@ -2331,10 +2277,10 @@
   }                                                                           \
 
 #define brighten_pixel()                                                      \
-  pixel_top = upper + ((pixel_top * blend) >> 4);                             \
+  pixel_top = upper + ((pixel_top * blend) >> 4)                              \
 
 #define darken_pixel()                                                        \
-  pixel_top = (pixel_top * blend) >> 4;                                       \
+  pixel_top = (pixel_top * blend) >> 4                                        \
 
 #define effect_condition_alpha                                                \
   ((pixel_pair & 0x04000200) == 0x04000200)                                   \
@@ -2422,32 +2368,8 @@
 
 // Blend top two pixels of scanline with each other.
 
-#ifdef RENDER_COLOR16_NORMAL
-
-void expand_normal(u16 *screen_ptr, u32 start, u32 end)
-{
-  u32 i, pixel_source;
-  screen_ptr += start;
-
-  return;
-
-  end -= start;
-
-  for(i = 0; i < end; i++)
-  {
-    pixel_source = *screen_ptr;
-    *screen_ptr = palette_ram_converted[pixel_source];
-
-    screen_ptr++;
-  }
-}
-
-#else
-
 #define expand_normal(screen_ptr, start, end)
 
-#endif
-
 void expand_blend(u32 *screen_src_ptr, u16 *screen_dest_ptr,
  u32 start, u32 end)
 {
@@ -3399,16 +3321,16 @@
   gecb.finish_arg = NULL;
   gecbid = sceGeSetCallback(&gecb);
 
-  screen_vertex[0] = 0 + 0.5;
-  screen_vertex[1] = 0 + 0.5;
-  screen_vertex[2] = 0 + 0.5;
-  screen_vertex[3] = 0 + 0.5;
-  screen_vertex[4] = 0;
+  screen_vertex[0] = 0.0 + 0.5;
+  screen_vertex[1] = 0.0 + 0.5;
+  screen_vertex[2] = 0.0 + 0.5;
+  screen_vertex[3] = 0.0 + 0.5;
+  screen_vertex[4] = 0.0;
   screen_vertex[5] = GBA_SCREEN_WIDTH - 0.5;
   screen_vertex[6] = GBA_SCREEN_HEIGHT - 0.5;
   screen_vertex[7] = PSP_SCREEN_WIDTH - 0.5;
   screen_vertex[8] = PSP_SCREEN_HEIGHT - 0.5;
-  screen_vertex[9] = 0;
+  screen_vertex[9] = 0.0;
 
   // Set framebuffer to PSP VRAM
   GE_CMD(FBP, ((u32)psp_gu_vram_base & 0x00FFFFFF));
@@ -3471,24 +3393,36 @@
   switch(scale)
   {
     case unscaled:
-      screen_vertex[2] = 120 + 0.5;
-      screen_vertex[3] = 56 + 0.5;
-      screen_vertex[7] = GBA_SCREEN_WIDTH + 120 - 0.5;
-      screen_vertex[8] = GBA_SCREEN_HEIGHT + 56 - 0.5;
+      screen_vertex[0] = 0.0;
+      screen_vertex[1] = 0.0;
+      screen_vertex[2] = 120.0;
+      screen_vertex[3] = 56.0;
+      screen_vertex[5] = (float)GBA_SCREEN_WIDTH;
+      screen_vertex[6] = (float)GBA_SCREEN_HEIGHT;
+      screen_vertex[7] = GBA_SCREEN_WIDTH + 120.0;
+      screen_vertex[8] = GBA_SCREEN_HEIGHT + 56.0;
       break;
 
     case scaled_aspect:
-      screen_vertex[2] = 36 + 0.5;
-      screen_vertex[3] = 0 + 0.5;
-      screen_vertex[7] = 408 + 36 - 0.5;
-      screen_vertex[8] = PSP_SCREEN_HEIGHT - 0.5;
+      screen_vertex[0] = 0.0 + 0.5;
+      screen_vertex[1] = 0.0 + 0.5;
+      screen_vertex[2] = 36.0;
+      screen_vertex[3] = 0.0;
+      screen_vertex[5] = GBA_SCREEN_WIDTH - 0.5;
+      screen_vertex[6] = GBA_SCREEN_HEIGHT - 0.5;
+      screen_vertex[7] = 408.0 + 36.0;
+      screen_vertex[8] = (float)PSP_SCREEN_HEIGHT;
       break;
 
     case fullscreen:
-      screen_vertex[2] = 0;
-      screen_vertex[3] = 0;
-      screen_vertex[7] = PSP_SCREEN_WIDTH;
-      screen_vertex[8] = PSP_SCREEN_HEIGHT;
+      screen_vertex[0] = 0.0 + 0.5;
+      screen_vertex[1] = 0.0 + 0.5;
+      screen_vertex[2] = 0.0;
+      screen_vertex[3] = 0.0;
+      screen_vertex[5] = GBA_SCREEN_WIDTH - 0.5;
+      screen_vertex[6] = GBA_SCREEN_HEIGHT - 0.5;
+      screen_vertex[7] = (float)PSP_SCREEN_WIDTH;
+      screen_vertex[8] = (float)PSP_SCREEN_HEIGHT;
       break;
   }
 
diff -ru 30_orig/zip.c 30_new/zip.c
--- 30_orig/zip.c	2007-08-16 14:57:05.601000000 +0900
+++ 30_new/zip.c	2007-08-06 23:45:44.000000000 +0900
@@ -44,7 +44,7 @@
   s16 ExtraFieldLength;
 }  __attribute__((packed));
 
-u32 load_file_zip(char *filename)
+s32 load_file_zip(char *filename)
 {
   struct SZIPFileHeader data;
   char tmp[1024];
@@ -123,6 +123,7 @@
 
           stream.zalloc = (alloc_func)0;
           stream.zfree = (free_func)0;
+          stream.opaque = (voidpf)0;
 
           err = inflateInit2(&stream, -MAX_WBITS);
 
diff -ru 30_orig/zip.h 30_new/zip.h
--- 30_orig/zip.h	2007-08-16 14:57:05.671000000 +0900
+++ 30_new/zip.h	2007-08-06 23:45:26.000000000 +0900
@@ -21,7 +21,7 @@
 #ifndef ZIP_H
 #define ZIP_H
 
-u32 load_file_zip(char *filename);
+s32 load_file_zip(char *filename);
 
 #endif
 
